
GPS_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00003b44  00003bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  008000ec  008000ec  00003c64  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001476  00000000  00000000  00006634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <main>
      8a:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac eb       	ldi	r26, 0xBC	; 188
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c eb       	ldi	r24, 0xBC	; 188
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 34 1d 	jmp	0x3a68	; 0x3a68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_Direction_Init_pro>:
volatile uint8 *PORT_registers[]  = {&PORTA , &PORTB , &PORTC , &PORTD};
/* Reference to the Port Status Register  */
volatile uint8 *PIN_registers[] = {&PINA, &PINB, &PINC, &PIND};

void GPIO_Direction_Init_pro (pin_config_t * pin_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_Direction_Init_pro+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_Direction_Init_pro+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <GPIO_Direction_Init_pro+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
	switch (pin_config->direction)
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3e 83       	std	Y+6, r19	; 0x06
     b64:	2d 83       	std	Y+5, r18	; 0x05
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <GPIO_Direction_Init_pro+0x8a>
     b6e:	2d 81       	ldd	r18, Y+5	; 0x05
     b70:	3e 81       	ldd	r19, Y+6	; 0x06
     b72:	21 30       	cpi	r18, 0x01	; 1
     b74:	31 05       	cpc	r19, r1
     b76:	09 f0       	breq	.+2      	; 0xb7a <GPIO_Direction_Init_pro+0x34>
     b78:	55 c0       	rjmp	.+170    	; 0xc24 <GPIO_Direction_Init_pro+0xde>
	{
	case GPIO_DIRECTION_OUTPUT :
		SET_BIT(*DDR_registers[pin_config->port] ,pin_config->pin);
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	80 81       	ld	r24, Z
     b80:	88 2f       	mov	r24, r24
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	fc 01       	movw	r30, r24
     b8a:	ec 53       	subi	r30, 0x3C	; 60
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	a0 81       	ld	r26, Z
     b90:	b1 81       	ldd	r27, Z+1	; 0x01
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	80 81       	ld	r24, Z
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	fc 01       	movw	r30, r24
     ba2:	ec 53       	subi	r30, 0x3C	; 60
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	01 90       	ld	r0, Z+
     ba8:	f0 81       	ld	r31, Z
     baa:	e0 2d       	mov	r30, r0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	e9 81       	ldd	r30, Y+1	; 0x01
     bb2:	fa 81       	ldd	r31, Y+2	; 0x02
     bb4:	81 81       	ldd	r24, Z+1	; 0x01
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <GPIO_Direction_Init_pro+0x80>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <GPIO_Direction_Init_pro+0x7c>
     bca:	84 2b       	or	r24, r20
     bcc:	8c 93       	st	X, r24
     bce:	2a c0       	rjmp	.+84     	; 0xc24 <GPIO_Direction_Init_pro+0xde>

		break;

	case GPIO_DIRECTION_INPUT :
		CLEAR_BIT(*DDR_registers[pin_config->port],pin_config->pin);
     bd0:	e9 81       	ldd	r30, Y+1	; 0x01
     bd2:	fa 81       	ldd	r31, Y+2	; 0x02
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	fc 01       	movw	r30, r24
     be0:	ec 53       	subi	r30, 0x3C	; 60
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	a0 81       	ld	r26, Z
     be6:	b1 81       	ldd	r27, Z+1	; 0x01
     be8:	e9 81       	ldd	r30, Y+1	; 0x01
     bea:	fa 81       	ldd	r31, Y+2	; 0x02
     bec:	80 81       	ld	r24, Z
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	fc 01       	movw	r30, r24
     bf8:	ec 53       	subi	r30, 0x3C	; 60
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	e9 81       	ldd	r30, Y+1	; 0x01
     c08:	fa 81       	ldd	r31, Y+2	; 0x02
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_Direction_Init_pro+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	2a 95       	dec	r18
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_Direction_Init_pro+0xd0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24

		break;
	}
	switch (pin_config->logic)
     c24:	e9 81       	ldd	r30, Y+1	; 0x01
     c26:	fa 81       	ldd	r31, Y+2	; 0x02
     c28:	83 81       	ldd	r24, Z+3	; 0x03
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3c 83       	std	Y+4, r19	; 0x04
     c30:	2b 83       	std	Y+3, r18	; 0x03
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	89 f1       	breq	.+98     	; 0xc9c <GPIO_Direction_Init_pro+0x156>
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	3c 81       	ldd	r19, Y+4	; 0x04
     c3e:	21 30       	cpi	r18, 0x01	; 1
     c40:	31 05       	cpc	r19, r1
     c42:	09 f0       	breq	.+2      	; 0xc46 <GPIO_Direction_Init_pro+0x100>
     c44:	56 c0       	rjmp	.+172    	; 0xcf2 <GPIO_Direction_Init_pro+0x1ac>
	{
	case LOGIC_HIGH :
		SET_BIT(*PORT_registers[pin_config->port],pin_config->pin);
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	80 81       	ld	r24, Z
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	fc 01       	movw	r30, r24
     c56:	e4 53       	subi	r30, 0x34	; 52
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	a0 81       	ld	r26, Z
     c5c:	b1 81       	ldd	r27, Z+1	; 0x01
     c5e:	e9 81       	ldd	r30, Y+1	; 0x01
     c60:	fa 81       	ldd	r31, Y+2	; 0x02
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	fc 01       	movw	r30, r24
     c6e:	e4 53       	subi	r30, 0x34	; 52
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	01 90       	ld	r0, Z+
     c74:	f0 81       	ld	r31, Z
     c76:	e0 2d       	mov	r30, r0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	e9 81       	ldd	r30, Y+1	; 0x01
     c7e:	fa 81       	ldd	r31, Y+2	; 0x02
     c80:	81 81       	ldd	r24, Z+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <GPIO_Direction_Init_pro+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <GPIO_Direction_Init_pro+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	2b c0       	rjmp	.+86     	; 0xcf2 <GPIO_Direction_Init_pro+0x1ac>
		break;
	case LOGIC_LOW  :
		CLEAR_BIT(*PORT_registers[pin_config->port],pin_config->pin);
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	80 81       	ld	r24, Z
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	fc 01       	movw	r30, r24
     cac:	e4 53       	subi	r30, 0x34	; 52
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	a0 81       	ld	r26, Z
     cb2:	b1 81       	ldd	r27, Z+1	; 0x01
     cb4:	e9 81       	ldd	r30, Y+1	; 0x01
     cb6:	fa 81       	ldd	r31, Y+2	; 0x02
     cb8:	80 81       	ld	r24, Z
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	fc 01       	movw	r30, r24
     cc4:	e4 53       	subi	r30, 0x34	; 52
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	01 90       	ld	r0, Z+
     cca:	f0 81       	ld	r31, Z
     ccc:	e0 2d       	mov	r30, r0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <GPIO_Direction_Init_pro+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <GPIO_Direction_Init_pro+0x19e>
     cec:	80 95       	com	r24
     cee:	84 23       	and	r24, r20
     cf0:	8c 93       	st	X, r24
		break;
	}
}
     cf2:	26 96       	adiw	r28, 0x06	; 6
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <GPIO_setupPinDirection>:


void GPIO_setupPinDirection (uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <GPIO_setupPinDirection+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <GPIO_setupPinDirection+0x8>
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	6a 83       	std	Y+2, r22	; 0x02
     d16:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	88 30       	cpi	r24, 0x08	; 8
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <GPIO_setupPinDirection+0x1c>
     d1e:	d5 c0       	rjmp	.+426    	; 0xeca <GPIO_setupPinDirection+0x1c6>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_setupPinDirection+0x24>
     d26:	d1 c0       	rjmp	.+418    	; 0xeca <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	3d 83       	std	Y+5, r19	; 0x05
     d30:	2c 83       	std	Y+4, r18	; 0x04
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	9d 81       	ldd	r25, Y+5	; 0x05
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	91 05       	cpc	r25, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <GPIO_setupPinDirection+0x3a>
     d3c:	43 c0       	rjmp	.+134    	; 0xdc4 <GPIO_setupPinDirection+0xc0>
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	2c f4       	brge	.+10     	; 0xd52 <GPIO_setupPinDirection+0x4e>
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	71 f0       	breq	.+28     	; 0xd6c <GPIO_setupPinDirection+0x68>
     d50:	bc c0       	rjmp	.+376    	; 0xeca <GPIO_setupPinDirection+0x1c6>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	22 30       	cpi	r18, 0x02	; 2
     d58:	31 05       	cpc	r19, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <GPIO_setupPinDirection+0x5a>
     d5c:	5f c0       	rjmp	.+190    	; 0xe1c <GPIO_setupPinDirection+0x118>
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	9d 81       	ldd	r25, Y+5	; 0x05
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	91 05       	cpc	r25, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <GPIO_setupPinDirection+0x66>
     d68:	85 c0       	rjmp	.+266    	; 0xe74 <GPIO_setupPinDirection+0x170>
     d6a:	af c0       	rjmp	.+350    	; 0xeca <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_INDEX :

			if (direction == PIN_OUTPUT )
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	a1 f4       	brne	.+40     	; 0xd9a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d72:	aa e3       	ldi	r26, 0x3A	; 58
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_setupPinDirection+0x8c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_setupPinDirection+0x88>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	98 c0       	rjmp	.+304    	; 0xeca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d9a:	aa e3       	ldi	r26, 0x3A	; 58
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <GPIO_setupPinDirection+0xb4>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <GPIO_setupPinDirection+0xb0>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	83 c0       	rjmp	.+262    	; 0xeca <GPIO_setupPinDirection+0x1c6>


			break;
		case PORTB_INDEX :

			if (direction == PIN_OUTPUT )
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	a1 f4       	brne	.+40     	; 0xdf2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dca:	a7 e3       	ldi	r26, 0x37	; 55
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e3       	ldi	r30, 0x37	; 55
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <GPIO_setupPinDirection+0xe4>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <GPIO_setupPinDirection+0xe0>
     dec:	84 2b       	or	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	6c c0       	rjmp	.+216    	; 0xeca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     df2:	a7 e3       	ldi	r26, 0x37	; 55
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e3       	ldi	r30, 0x37	; 55
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_setupPinDirection+0x10c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_setupPinDirection+0x108>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	57 c0       	rjmp	.+174    	; 0xeca <GPIO_setupPinDirection+0x1c6>


			break;
		case PORTC_INDEX :

			if (direction == PIN_OUTPUT )
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	a1 f4       	brne	.+40     	; 0xe4a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRD,pin_num);
     e22:	a1 e3       	ldi	r26, 0x31	; 49
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e1 e3       	ldi	r30, 0x31	; 49
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <GPIO_setupPinDirection+0x13c>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <GPIO_setupPinDirection+0x138>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	40 c0       	rjmp	.+128    	; 0xeca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e4a:	a1 e3       	ldi	r26, 0x31	; 49
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_setupPinDirection+0x164>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_setupPinDirection+0x160>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	2b c0       	rjmp	.+86     	; 0xeca <GPIO_setupPinDirection+0x1c6>


			break;
		case PORTD_INDEX :

			if (direction == PIN_OUTPUT )
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	a1 f4       	brne	.+40     	; 0xea2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRC,pin_num);
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_setupPinDirection+0x194>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_setupPinDirection+0x190>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ea2:	a4 e3       	ldi	r26, 0x34	; 52
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e4 e3       	ldi	r30, 0x34	; 52
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <GPIO_setupPinDirection+0x1bc>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <GPIO_setupPinDirection+0x1b8>
     ec4:	80 95       	com	r24
     ec6:	84 23       	and	r24, r20
     ec8:	8c 93       	st	X, r24

	}



}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <GPIO_writePin+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <GPIO_writePin+0x8>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
     eec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <GPIO_writePin+0x1c>
     ef4:	d5 c0       	rjmp	.+426    	; 0x10a0 <GPIO_writePin+0x1c6>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_writePin+0x24>
     efc:	d1 c0       	rjmp	.+418    	; 0x10a0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3d 83       	std	Y+5, r19	; 0x05
     f06:	2c 83       	std	Y+4, r18	; 0x04
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <GPIO_writePin+0x3a>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <GPIO_writePin+0xc0>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <GPIO_writePin+0x4e>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	71 f0       	breq	.+28     	; 0xf42 <GPIO_writePin+0x68>
     f26:	bc c0       	rjmp	.+376    	; 0x10a0 <GPIO_writePin+0x1c6>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <GPIO_writePin+0x5a>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <GPIO_writePin+0x118>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <GPIO_writePin+0x66>
     f3e:	85 c0       	rjmp	.+266    	; 0x104a <GPIO_writePin+0x170>
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <GPIO_writePin+0x1c6>
		{
		case PORTA_INDEX:
			if(value == LOGIC_HIGH)
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_writePin+0x8c>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_writePin+0x88>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	98 c0       	rjmp	.+304    	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_writePin+0xb4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_writePin+0xb0>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	83 c0       	rjmp	.+262    	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_INDEX:
			if(value == LOGIC_HIGH)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_writePin+0xe4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_writePin+0xe0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	6c c0       	rjmp	.+216    	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_writePin+0x10c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_writePin+0x108>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	57 c0       	rjmp	.+174    	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_INDEX:
			if(value == LOGIC_HIGH)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_writePin+0x13c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_writePin+0x138>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	40 c0       	rjmp	.+128    	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1020:	a5 e3       	ldi	r26, 0x35	; 53
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e3       	ldi	r30, 0x35	; 53
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_writePin+0x164>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_writePin+0x160>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_INDEX:
			if(value == LOGIC_HIGH)
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	a1 f4       	brne	.+40     	; 0x1078 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_writePin+0x194>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_writePin+0x190>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1078:	a2 e3       	ldi	r26, 0x32	; 50
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_writePin+0x1bc>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_writePin+0x1b8>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_readPin+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_readPin+0x8>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	8a 83       	std	Y+2, r24	; 0x02
    10c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10c2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <GPIO_readPin+0x1c>
    10ca:	84 c0       	rjmp	.+264    	; 0x11d4 <GPIO_readPin+0x124>
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <GPIO_readPin+0x24>
    10d2:	80 c0       	rjmp	.+256    	; 0x11d4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	4c 81       	ldd	r20, Y+4	; 0x04
    10e0:	5d 81       	ldd	r21, Y+5	; 0x05
    10e2:	41 30       	cpi	r20, 0x01	; 1
    10e4:	51 05       	cpc	r21, r1
    10e6:	79 f1       	breq	.+94     	; 0x1146 <GPIO_readPin+0x96>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	34 f4       	brge	.+12     	; 0x10fe <GPIO_readPin+0x4e>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	21 15       	cp	r18, r1
    10f8:	31 05       	cpc	r19, r1
    10fa:	69 f0       	breq	.+26     	; 0x1116 <GPIO_readPin+0x66>
    10fc:	6b c0       	rjmp	.+214    	; 0x11d4 <GPIO_readPin+0x124>
    10fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1100:	5d 81       	ldd	r21, Y+5	; 0x05
    1102:	42 30       	cpi	r20, 0x02	; 2
    1104:	51 05       	cpc	r21, r1
    1106:	b9 f1       	breq	.+110    	; 0x1176 <GPIO_readPin+0xc6>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <GPIO_readPin+0x64>
    1112:	49 c0       	rjmp	.+146    	; 0x11a6 <GPIO_readPin+0xf6>
    1114:	5f c0       	rjmp	.+190    	; 0x11d4 <GPIO_readPin+0x124>
		{
		case PORTA_INDEX:
			if(BIT_IS_SET(PINA,pin_num))
    1116:	e9 e3       	ldi	r30, 0x39	; 57
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_readPin+0x7e>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_readPin+0x7a>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	88 23       	and	r24, r24
    113a:	19 f0       	breq	.+6      	; 0x1142 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	49 c0       	rjmp	.+146    	; 0x11d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	47 c0       	rjmp	.+142    	; 0x11d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_INDEX:
			if(BIT_IS_SET(PINB,pin_num))
    1146:	e6 e3       	ldi	r30, 0x36	; 54
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_readPin+0xae>
    115a:	55 95       	asr	r21
    115c:	47 95       	ror	r20
    115e:	8a 95       	dec	r24
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_readPin+0xaa>
    1162:	ca 01       	movw	r24, r20
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	31 c0       	rjmp	.+98     	; 0x11d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	2f c0       	rjmp	.+94     	; 0x11d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_INDEX:
			if(BIT_IS_SET(PINC,pin_num))
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_readPin+0xde>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_readPin+0xda>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	90 70       	andi	r25, 0x00	; 0
    1198:	88 23       	and	r24, r24
    119a:	19 f0       	breq	.+6      	; 0x11a2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	19 c0       	rjmp	.+50     	; 0x11d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	17 c0       	rjmp	.+46     	; 0x11d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_INDEX:
			if(BIT_IS_SET(PIND,pin_num))
    11a6:	e0 e3       	ldi	r30, 0x30	; 48
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_readPin+0x10e>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_readPin+0x10a>
    11c2:	ca 01       	movw	r24, r20
    11c4:	81 70       	andi	r24, 0x01	; 1
    11c6:	90 70       	andi	r25, 0x00	; 0
    11c8:	88 23       	and	r24, r24
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11d2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2e 97       	sbiw	r28, 0x0e	; 14
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 ea       	ldi	r26, 0xA0	; 160
    1214:	b1 e4       	ldi	r27, 0x41	; 65
    1216:	8b 87       	std	Y+11, r24	; 0x0b
    1218:	9c 87       	std	Y+12, r25	; 0x0c
    121a:	ad 87       	std	Y+13, r26	; 0x0d
    121c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1220:	7c 85       	ldd	r23, Y+12	; 0x0c
    1222:	8d 85       	ldd	r24, Y+13	; 0x0d
    1224:	9e 85       	ldd	r25, Y+14	; 0x0e
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8f 83       	std	Y+7, r24	; 0x07
    1238:	98 87       	std	Y+8, r25	; 0x08
    123a:	a9 87       	std	Y+9, r26	; 0x09
    123c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <LCD_init+0x7a>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	3f c0       	rjmp	.+126    	; 0x12de <LCD_init+0xf8>
	else if (__tmp > 65535)
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6b 85       	ldd	r22, Y+11	; 0x0b
    127a:	7c 85       	ldd	r23, Y+12	; 0x0c
    127c:	8d 85       	ldd	r24, Y+13	; 0x0d
    127e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <LCD_init+0xda>
    12a2:	88 ec       	ldi	r24, 0xC8	; 200
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <LCD_init+0xc8>
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <LCD_init+0xbc>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_init+0x104>
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	64 e0       	ldi	r22, 0x04	; 4
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	65 e0       	ldi	r22, 0x05	; 5
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	66 e0       	ldi	r22, 0x06	; 6
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	67 e0       	ldi	r22, 0x07	; 7
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    131a:	83 e3       	ldi	r24, 0x33	; 51
    131c:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1320:	82 e3       	ldi	r24, 0x32	; 50
    1322:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1326:	88 e2       	ldi	r24, 0x28	; 40
    1328:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    132c:	8c e0       	ldi	r24, 0x0C	; 12
    132e:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
}
    1338:	2e 96       	adiw	r28, 0x0e	; 14
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	c3 56       	subi	r28, 0x63	; 99
    1358:	d0 40       	sbci	r29, 0x00	; 0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	fe 01       	movw	r30, r28
    1366:	ed 59       	subi	r30, 0x9D	; 157
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1376:	fe 01       	movw	r30, r28
    1378:	e1 5a       	subi	r30, 0xA1	; 161
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e8       	ldi	r26, 0x80	; 128
    1382:	bf e3       	ldi	r27, 0x3F	; 63
    1384:	80 83       	st	Z, r24
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	a2 83       	std	Z+2, r26	; 0x02
    138a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	8e 01       	movw	r16, r28
    138e:	05 5a       	subi	r16, 0xA5	; 165
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	fe 01       	movw	r30, r28
    1394:	e1 5a       	subi	r30, 0xA1	; 161
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a ef       	ldi	r20, 0xFA	; 250
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ba:	fe 01       	movw	r30, r28
    13bc:	e5 5a       	subi	r30, 0xA5	; 165
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	60 81       	ld	r22, Z
    13c2:	71 81       	ldd	r23, Z+1	; 0x01
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	44 f4       	brge	.+16     	; 0x13e8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    13d8:	fe 01       	movw	r30, r28
    13da:	e7 5a       	subi	r30, 0xA7	; 167
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	80 83       	st	Z, r24
    13e6:	64 c0       	rjmp	.+200    	; 0x14b0 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    13e8:	fe 01       	movw	r30, r28
    13ea:	e5 5a       	subi	r30, 0xA5	; 165
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	4f e7       	ldi	r20, 0x7F	; 127
    13fc:	57 e4       	ldi	r21, 0x47	; 71
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1402:	18 16       	cp	r1, r24
    1404:	0c f0       	brlt	.+2      	; 0x1408 <LCD_sendCommand+0xbe>
    1406:	43 c0       	rjmp	.+134    	; 0x148e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	fe 01       	movw	r30, r28
    140a:	e1 5a       	subi	r30, 0xA1	; 161
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e2       	ldi	r20, 0x20	; 32
    141c:	51 e4       	ldi	r21, 0x41	; 65
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8e 01       	movw	r16, r28
    1428:	07 5a       	subi	r16, 0xA7	; 167
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	f8 01       	movw	r30, r16
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	80 83       	st	Z, r24
    143e:	1f c0       	rjmp	.+62     	; 0x147e <LCD_sendCommand+0x134>
    1440:	fe 01       	movw	r30, r28
    1442:	e9 5a       	subi	r30, 0xA9	; 169
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	88 ec       	ldi	r24, 0xC8	; 200
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	fe 01       	movw	r30, r28
    1450:	e9 5a       	subi	r30, 0xA9	; 169
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_sendCommand+0x10e>
    145c:	fe 01       	movw	r30, r28
    145e:	e9 5a       	subi	r30, 0xA9	; 169
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1466:	de 01       	movw	r26, r28
    1468:	a7 5a       	subi	r26, 0xA7	; 167
    146a:	bf 4f       	sbci	r27, 0xFF	; 255
    146c:	fe 01       	movw	r30, r28
    146e:	e7 5a       	subi	r30, 0xA7	; 167
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	fe 01       	movw	r30, r28
    1480:	e7 5a       	subi	r30, 0xA7	; 167
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	d1 f6       	brne	.-76     	; 0x1440 <LCD_sendCommand+0xf6>
    148c:	27 c0       	rjmp	.+78     	; 0x14dc <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	8e 01       	movw	r16, r28
    1490:	07 5a       	subi	r16, 0xA7	; 167
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	fe 01       	movw	r30, r28
    1496:	e5 5a       	subi	r30, 0xA5	; 165
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24
    14b0:	de 01       	movw	r26, r28
    14b2:	ab 5a       	subi	r26, 0xAB	; 171
    14b4:	bf 4f       	sbci	r27, 0xFF	; 255
    14b6:	fe 01       	movw	r30, r28
    14b8:	e7 5a       	subi	r30, 0xA7	; 167
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	8d 93       	st	X+, r24
    14c2:	9c 93       	st	X, r25
    14c4:	fe 01       	movw	r30, r28
    14c6:	eb 5a       	subi	r30, 0xAB	; 171
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCD_sendCommand+0x184>
    14d2:	fe 01       	movw	r30, r28
    14d4:	eb 5a       	subi	r30, 0xAB	; 171
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ef 5a       	subi	r30, 0xAF	; 175
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a0 e8       	ldi	r26, 0x80	; 128
    14f2:	bf e3       	ldi	r27, 0x3F	; 63
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	a2 83       	std	Z+2, r26	; 0x02
    14fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fc:	8e 01       	movw	r16, r28
    14fe:	03 5b       	subi	r16, 0xB3	; 179
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	ef 5a       	subi	r30, 0xAF	; 175
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	f8 01       	movw	r30, r16
    1522:	80 83       	st	Z, r24
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	a2 83       	std	Z+2, r26	; 0x02
    1528:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    152a:	fe 01       	movw	r30, r28
    152c:	e3 5b       	subi	r30, 0xB3	; 179
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1544:	88 23       	and	r24, r24
    1546:	44 f4       	brge	.+16     	; 0x1558 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1548:	fe 01       	movw	r30, r28
    154a:	e5 5b       	subi	r30, 0xB5	; 181
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	64 c0       	rjmp	.+200    	; 0x1620 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1558:	fe 01       	movw	r30, r28
    155a:	e3 5b       	subi	r30, 0xB3	; 179
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	0c f0       	brlt	.+2      	; 0x1578 <LCD_sendCommand+0x22e>
    1576:	43 c0       	rjmp	.+134    	; 0x15fe <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	fe 01       	movw	r30, r28
    157a:	ef 5a       	subi	r30, 0xAF	; 175
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	8e 01       	movw	r16, r28
    1598:	05 5b       	subi	r16, 0xB5	; 181
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	f8 01       	movw	r30, r16
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    15ae:	1f c0       	rjmp	.+62     	; 0x15ee <LCD_sendCommand+0x2a4>
    15b0:	fe 01       	movw	r30, r28
    15b2:	e7 5b       	subi	r30, 0xB7	; 183
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	88 ec       	ldi	r24, 0xC8	; 200
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	fe 01       	movw	r30, r28
    15c0:	e7 5b       	subi	r30, 0xB7	; 183
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_sendCommand+0x27e>
    15cc:	fe 01       	movw	r30, r28
    15ce:	e7 5b       	subi	r30, 0xB7	; 183
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	de 01       	movw	r26, r28
    15d8:	a5 5b       	subi	r26, 0xB5	; 181
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	fe 01       	movw	r30, r28
    15de:	e5 5b       	subi	r30, 0xB5	; 181
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ee:	fe 01       	movw	r30, r28
    15f0:	e5 5b       	subi	r30, 0xB5	; 181
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	d1 f6       	brne	.-76     	; 0x15b0 <LCD_sendCommand+0x266>
    15fc:	27 c0       	rjmp	.+78     	; 0x164c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	8e 01       	movw	r16, r28
    1600:	05 5b       	subi	r16, 0xB5	; 181
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	fe 01       	movw	r30, r28
    1606:	e3 5b       	subi	r30, 0xB3	; 179
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
    1620:	de 01       	movw	r26, r28
    1622:	a9 5b       	subi	r26, 0xB9	; 185
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	fe 01       	movw	r30, r28
    1628:	e5 5b       	subi	r30, 0xB5	; 181
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	8d 93       	st	X+, r24
    1632:	9c 93       	st	X, r25
    1634:	fe 01       	movw	r30, r28
    1636:	e9 5b       	subi	r30, 0xB9	; 185
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <LCD_sendCommand+0x2f4>
    1642:	fe 01       	movw	r30, r28
    1644:	e9 5b       	subi	r30, 0xB9	; 185
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    164c:	fe 01       	movw	r30, r28
    164e:	ed 59       	subi	r30, 0x9D	; 157
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	80 71       	andi	r24, 0x10	; 16
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	95 95       	asr	r25
    165e:	87 95       	ror	r24
    1660:	95 95       	asr	r25
    1662:	87 95       	ror	r24
    1664:	95 95       	asr	r25
    1666:	87 95       	ror	r24
    1668:	95 95       	asr	r25
    166a:	87 95       	ror	r24
    166c:	98 2f       	mov	r25, r24
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	64 e0       	ldi	r22, 0x04	; 4
    1672:	49 2f       	mov	r20, r25
    1674:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1678:	fe 01       	movw	r30, r28
    167a:	ed 59       	subi	r30, 0x9D	; 157
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	80 72       	andi	r24, 0x20	; 32
    1686:	90 70       	andi	r25, 0x00	; 0
    1688:	95 95       	asr	r25
    168a:	87 95       	ror	r24
    168c:	95 95       	asr	r25
    168e:	87 95       	ror	r24
    1690:	95 95       	asr	r25
    1692:	87 95       	ror	r24
    1694:	95 95       	asr	r25
    1696:	87 95       	ror	r24
    1698:	95 95       	asr	r25
    169a:	87 95       	ror	r24
    169c:	98 2f       	mov	r25, r24
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	65 e0       	ldi	r22, 0x05	; 5
    16a2:	49 2f       	mov	r20, r25
    16a4:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    16a8:	fe 01       	movw	r30, r28
    16aa:	ed 59       	subi	r30, 0x9D	; 157
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	80 74       	andi	r24, 0x40	; 64
    16b6:	90 70       	andi	r25, 0x00	; 0
    16b8:	08 2e       	mov	r0, r24
    16ba:	89 2f       	mov	r24, r25
    16bc:	00 0c       	add	r0, r0
    16be:	88 1f       	adc	r24, r24
    16c0:	99 0b       	sbc	r25, r25
    16c2:	00 0c       	add	r0, r0
    16c4:	88 1f       	adc	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	98 2f       	mov	r25, r24
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	66 e0       	ldi	r22, 0x06	; 6
    16ce:	49 2f       	mov	r20, r25
    16d0:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    16d4:	fe 01       	movw	r30, r28
    16d6:	ed 59       	subi	r30, 0x9D	; 157
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 81       	ld	r24, Z
    16dc:	98 2f       	mov	r25, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	99 27       	eor	r25, r25
    16e2:	99 1f       	adc	r25, r25
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	67 e0       	ldi	r22, 0x07	; 7
    16e8:	49 2f       	mov	r20, r25
    16ea:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    16ee:	fe 01       	movw	r30, r28
    16f0:	ed 5b       	subi	r30, 0xBD	; 189
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e8       	ldi	r26, 0x80	; 128
    16fa:	bf e3       	ldi	r27, 0x3F	; 63
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	a2 83       	std	Z+2, r26	; 0x02
    1702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1704:	8e 01       	movw	r16, r28
    1706:	01 5c       	subi	r16, 0xC1	; 193
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	ed 5b       	subi	r30, 0xBD	; 189
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a ef       	ldi	r20, 0xFA	; 250
    171e:	54 e4       	ldi	r21, 0x44	; 68
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	f8 01       	movw	r30, r16
    172a:	80 83       	st	Z, r24
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	a2 83       	std	Z+2, r26	; 0x02
    1730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1732:	fe 01       	movw	r30, r28
    1734:	ff 96       	adiw	r30, 0x3f	; 63
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <LCD_sendCommand+0x40e>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9e af       	std	Y+62, r25	; 0x3e
    1754:	8d af       	std	Y+61, r24	; 0x3d
    1756:	46 c0       	rjmp	.+140    	; 0x17e4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1758:	fe 01       	movw	r30, r28
    175a:	ff 96       	adiw	r30, 0x3f	; 63
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	64 f5       	brge	.+88     	; 0x17cc <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	fe 01       	movw	r30, r28
    1776:	ed 5b       	subi	r30, 0xBD	; 189
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e2       	ldi	r20, 0x20	; 32
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e af       	std	Y+62, r25	; 0x3e
    17a0:	8d af       	std	Y+61, r24	; 0x3d
    17a2:	0f c0       	rjmp	.+30     	; 0x17c2 <LCD_sendCommand+0x478>
    17a4:	88 ec       	ldi	r24, 0xC8	; 200
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c af       	std	Y+60, r25	; 0x3c
    17aa:	8b af       	std	Y+59, r24	; 0x3b
    17ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    17ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_sendCommand+0x466>
    17b4:	9c af       	std	Y+60, r25	; 0x3c
    17b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9e af       	std	Y+62, r25	; 0x3e
    17c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	69 f7       	brne	.-38     	; 0x17a4 <LCD_sendCommand+0x45a>
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17cc:	fe 01       	movw	r30, r28
    17ce:	ff 96       	adiw	r30, 0x3f	; 63
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e af       	std	Y+62, r25	; 0x3e
    17e2:	8d af       	std	Y+61, r24	; 0x3d
    17e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e8:	9a af       	std	Y+58, r25	; 0x3a
    17ea:	89 af       	std	Y+57, r24	; 0x39
    17ec:	89 ad       	ldd	r24, Y+57	; 0x39
    17ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_sendCommand+0x4a6>
    17f4:	9a af       	std	Y+58, r25	; 0x3a
    17f6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e8       	ldi	r26, 0x80	; 128
    1808:	bf e3       	ldi	r27, 0x3F	; 63
    180a:	8d ab       	std	Y+53, r24	; 0x35
    180c:	9e ab       	std	Y+54, r25	; 0x36
    180e:	af ab       	std	Y+55, r26	; 0x37
    1810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6d a9       	ldd	r22, Y+53	; 0x35
    1814:	7e a9       	ldd	r23, Y+54	; 0x36
    1816:	8f a9       	ldd	r24, Y+55	; 0x37
    1818:	98 ad       	ldd	r25, Y+56	; 0x38
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	89 ab       	std	Y+49, r24	; 0x31
    182c:	9a ab       	std	Y+50, r25	; 0x32
    182e:	ab ab       	std	Y+51, r26	; 0x33
    1830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1832:	69 a9       	ldd	r22, Y+49	; 0x31
    1834:	7a a9       	ldd	r23, Y+50	; 0x32
    1836:	8b a9       	ldd	r24, Y+51	; 0x33
    1838:	9c a9       	ldd	r25, Y+52	; 0x34
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_sendCommand+0x50a>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	98 ab       	std	Y+48, r25	; 0x30
    1850:	8f a7       	std	Y+47, r24	; 0x2f
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6d a9       	ldd	r22, Y+53	; 0x35
    186e:	7e a9       	ldd	r23, Y+54	; 0x36
    1870:	8f a9       	ldd	r24, Y+55	; 0x37
    1872:	98 ad       	ldd	r25, Y+56	; 0x38
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LCD_sendCommand+0x56a>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e a7       	std	Y+46, r25	; 0x2e
    189c:	8d a7       	std	Y+45, r24	; 0x2d
    189e:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_sendCommand+0x558>
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	98 ab       	std	Y+48, r25	; 0x30
    18b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b6:	98 a9       	ldd	r25, Y+48	; 0x30
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <LCD_sendCommand+0x54c>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d4:	98 a9       	ldd	r25, Y+48	; 0x30
    18d6:	9c a7       	std	Y+44, r25	; 0x2c
    18d8:	8b a7       	std	Y+43, r24	; 0x2b
    18da:	8b a5       	ldd	r24, Y+43	; 0x2b
    18dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_sendCommand+0x594>
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	62 e0       	ldi	r22, 0x02	; 2
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8f a3       	std	Y+39, r24	; 0x27
    18fa:	98 a7       	std	Y+40, r25	; 0x28
    18fc:	a9 a7       	std	Y+41, r26	; 0x29
    18fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6f a1       	ldd	r22, Y+39	; 0x27
    1902:	78 a5       	ldd	r23, Y+40	; 0x28
    1904:	89 a5       	ldd	r24, Y+41	; 0x29
    1906:	9a a5       	ldd	r25, Y+42	; 0x2a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	9c a3       	std	Y+36, r25	; 0x24
    191c:	ad a3       	std	Y+37, r26	; 0x25
    191e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6f a1       	ldd	r22, Y+39	; 0x27
    195c:	78 a5       	ldd	r23, Y+40	; 0x28
    195e:	89 a5       	ldd	r24, Y+41	; 0x29
    1960:	9a a5       	ldd	r25, Y+42	; 0x2a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_sendCommand+0x658>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	98 a1       	ldd	r25, Y+32	; 0x20
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_sendCommand+0x646>
    1994:	98 a3       	std	Y+32, r25	; 0x20
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9a a3       	std	Y+34, r25	; 0x22
    19a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_sendCommand+0x63a>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_sendCommand+0x682>
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 59       	subi	r30, 0x9D	; 157
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	98 2f       	mov	r25, r24
    19de:	91 70       	andi	r25, 0x01	; 1
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	64 e0       	ldi	r22, 0x04	; 4
    19e4:	49 2f       	mov	r20, r25
    19e6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    19ea:	fe 01       	movw	r30, r28
    19ec:	ed 59       	subi	r30, 0x9D	; 157
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	82 70       	andi	r24, 0x02	; 2
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	95 95       	asr	r25
    19fc:	87 95       	ror	r24
    19fe:	98 2f       	mov	r25, r24
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	65 e0       	ldi	r22, 0x05	; 5
    1a04:	49 2f       	mov	r20, r25
    1a06:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 59       	subi	r30, 0x9D	; 157
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	84 70       	andi	r24, 0x04	; 4
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	95 95       	asr	r25
    1a1c:	87 95       	ror	r24
    1a1e:	95 95       	asr	r25
    1a20:	87 95       	ror	r24
    1a22:	98 2f       	mov	r25, r24
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	66 e0       	ldi	r22, 0x06	; 6
    1a28:	49 2f       	mov	r20, r25
    1a2a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ed 59       	subi	r30, 0x9D	; 157
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	88 70       	andi	r24, 0x08	; 8
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	95 95       	asr	r25
    1a40:	87 95       	ror	r24
    1a42:	95 95       	asr	r25
    1a44:	87 95       	ror	r24
    1a46:	95 95       	asr	r25
    1a48:	87 95       	ror	r24
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	67 e0       	ldi	r22, 0x07	; 7
    1a50:	49 2f       	mov	r20, r25
    1a52:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_sendCommand+0x7be>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0x7ac>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_sendCommand+0x7a0>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_sendCommand+0x7e8>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	8b 87       	std	Y+11, r24	; 0x0b
    1b4e:	9c 87       	std	Y+12, r25	; 0x0c
    1b50:	ad 87       	std	Y+13, r26	; 0x0d
    1b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8f 83       	std	Y+7, r24	; 0x07
    1b6e:	98 87       	std	Y+8, r25	; 0x08
    1b70:	a9 87       	std	Y+9, r26	; 0x09
    1b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_sendCommand+0x8ac>
    1bd8:	88 ec       	ldi	r24, 0xC8	; 200
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x89a>
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_sendCommand+0x88e>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_sendCommand+0x8d6>
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c28:	cd 59       	subi	r28, 0x9D	; 157
    1c2a:	df 4f       	sbci	r29, 0xFF	; 255
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	08 95       	ret

00001c40 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	c3 56       	subi	r28, 0x63	; 99
    1c4e:	d0 40       	sbci	r29, 0x00	; 0
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 59       	subi	r30, 0x9D	; 157
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e1 5a       	subi	r30, 0xA1	; 161
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	a2 83       	std	Z+2, r26	; 0x02
    1c80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	8e 01       	movw	r16, r28
    1c84:	05 5a       	subi	r16, 0xA5	; 165
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e1 5a       	subi	r30, 0xA1	; 161
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e5 5a       	subi	r30, 0xA5	; 165
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	44 f4       	brge	.+16     	; 0x1cde <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e7 5a       	subi	r30, 0xA7	; 167
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	64 c0       	rjmp	.+200    	; 0x1da6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e5 5a       	subi	r30, 0xA5	; 165
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <LCD_displayCharacter+0xbe>
    1cfc:	43 c0       	rjmp	.+134    	; 0x1d84 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e1 5a       	subi	r30, 0xA1	; 161
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	07 5a       	subi	r16, 0xA7	; 167
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	f8 01       	movw	r30, r16
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <LCD_displayCharacter+0x134>
    1d36:	fe 01       	movw	r30, r28
    1d38:	e9 5a       	subi	r30, 0xA9	; 169
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	88 ec       	ldi	r24, 0xC8	; 200
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	fe 01       	movw	r30, r28
    1d46:	e9 5a       	subi	r30, 0xA9	; 169
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_displayCharacter+0x10e>
    1d52:	fe 01       	movw	r30, r28
    1d54:	e9 5a       	subi	r30, 0xA9	; 169
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	de 01       	movw	r26, r28
    1d5e:	a7 5a       	subi	r26, 0xA7	; 167
    1d60:	bf 4f       	sbci	r27, 0xFF	; 255
    1d62:	fe 01       	movw	r30, r28
    1d64:	e7 5a       	subi	r30, 0xA7	; 167
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	9c 93       	st	X, r25
    1d72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 5a       	subi	r30, 0xA7	; 167
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	d1 f6       	brne	.-76     	; 0x1d36 <LCD_displayCharacter+0xf6>
    1d82:	27 c0       	rjmp	.+78     	; 0x1dd2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	8e 01       	movw	r16, r28
    1d86:	07 5a       	subi	r16, 0xA7	; 167
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e5 5a       	subi	r30, 0xA5	; 165
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	f8 01       	movw	r30, r16
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	de 01       	movw	r26, r28
    1da8:	ab 5a       	subi	r26, 0xAB	; 171
    1daa:	bf 4f       	sbci	r27, 0xFF	; 255
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 5a       	subi	r30, 0xA7	; 167
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	8d 93       	st	X+, r24
    1db8:	9c 93       	st	X, r25
    1dba:	fe 01       	movw	r30, r28
    1dbc:	eb 5a       	subi	r30, 0xAB	; 171
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_displayCharacter+0x184>
    1dc8:	fe 01       	movw	r30, r28
    1dca:	eb 5a       	subi	r30, 0xAB	; 171
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	62 e0       	ldi	r22, 0x02	; 2
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ef 5a       	subi	r30, 0xAF	; 175
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a0 e8       	ldi	r26, 0x80	; 128
    1de8:	bf e3       	ldi	r27, 0x3F	; 63
    1dea:	80 83       	st	Z, r24
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	a2 83       	std	Z+2, r26	; 0x02
    1df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df2:	8e 01       	movw	r16, r28
    1df4:	03 5b       	subi	r16, 0xB3	; 179
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ef 5a       	subi	r30, 0xAF	; 175
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4a ef       	ldi	r20, 0xFA	; 250
    1e0c:	54 e4       	ldi	r21, 0x44	; 68
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	f8 01       	movw	r30, r16
    1e18:	80 83       	st	Z, r24
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	a2 83       	std	Z+2, r26	; 0x02
    1e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e20:	fe 01       	movw	r30, r28
    1e22:	e3 5b       	subi	r30, 0xB3	; 179
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	44 f4       	brge	.+16     	; 0x1e4e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e5 5b       	subi	r30, 0xB5	; 181
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
    1e4c:	64 c0       	rjmp	.+200    	; 0x1f16 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e3 5b       	subi	r30, 0xB3	; 179
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	93 81       	ldd	r25, Z+3	; 0x03
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	0c f0       	brlt	.+2      	; 0x1e6e <LCD_displayCharacter+0x22e>
    1e6c:	43 c0       	rjmp	.+134    	; 0x1ef4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ef 5a       	subi	r30, 0xAF	; 175
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8e 01       	movw	r16, r28
    1e8e:	05 5b       	subi	r16, 0xB5	; 181
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
    1ea4:	1f c0       	rjmp	.+62     	; 0x1ee4 <LCD_displayCharacter+0x2a4>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e7 5b       	subi	r30, 0xB7	; 183
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e7 5b       	subi	r30, 0xB7	; 183
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <LCD_displayCharacter+0x27e>
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e7 5b       	subi	r30, 0xB7	; 183
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	de 01       	movw	r26, r28
    1ece:	a5 5b       	subi	r26, 0xB5	; 181
    1ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e5 5b       	subi	r30, 0xB5	; 181
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	9c 93       	st	X, r25
    1ee2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e5 5b       	subi	r30, 0xB5	; 181
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	d1 f6       	brne	.-76     	; 0x1ea6 <LCD_displayCharacter+0x266>
    1ef2:	27 c0       	rjmp	.+78     	; 0x1f42 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	05 5b       	subi	r16, 0xB5	; 181
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	e3 5b       	subi	r30, 0xB3	; 179
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
    1f16:	de 01       	movw	r26, r28
    1f18:	a9 5b       	subi	r26, 0xB9	; 185
    1f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e5 5b       	subi	r30, 0xB5	; 181
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	8d 93       	st	X+, r24
    1f28:	9c 93       	st	X, r25
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e9 5b       	subi	r30, 0xB9	; 185
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_displayCharacter+0x2f4>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e9 5b       	subi	r30, 0xB9	; 185
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1f42:	fe 01       	movw	r30, r28
    1f44:	ed 59       	subi	r30, 0x9D	; 157
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	80 71       	andi	r24, 0x10	; 16
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	95 95       	asr	r25
    1f54:	87 95       	ror	r24
    1f56:	95 95       	asr	r25
    1f58:	87 95       	ror	r24
    1f5a:	95 95       	asr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	95 95       	asr	r25
    1f60:	87 95       	ror	r24
    1f62:	98 2f       	mov	r25, r24
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	64 e0       	ldi	r22, 0x04	; 4
    1f68:	49 2f       	mov	r20, r25
    1f6a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ed 59       	subi	r30, 0x9D	; 157
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	80 72       	andi	r24, 0x20	; 32
    1f7c:	90 70       	andi	r25, 0x00	; 0
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	95 95       	asr	r25
    1f84:	87 95       	ror	r24
    1f86:	95 95       	asr	r25
    1f88:	87 95       	ror	r24
    1f8a:	95 95       	asr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	98 2f       	mov	r25, r24
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	49 2f       	mov	r20, r25
    1f9a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ed 59       	subi	r30, 0x9D	; 157
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	80 74       	andi	r24, 0x40	; 64
    1fac:	90 70       	andi	r25, 0x00	; 0
    1fae:	08 2e       	mov	r0, r24
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	00 0c       	add	r0, r0
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 0b       	sbc	r25, r25
    1fb8:	00 0c       	add	r0, r0
    1fba:	88 1f       	adc	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	66 e0       	ldi	r22, 0x06	; 6
    1fc4:	49 2f       	mov	r20, r25
    1fc6:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ed 59       	subi	r30, 0x9D	; 157
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	99 27       	eor	r25, r25
    1fd8:	99 1f       	adc	r25, r25
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	67 e0       	ldi	r22, 0x07	; 7
    1fde:	49 2f       	mov	r20, r25
    1fe0:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ed 5b       	subi	r30, 0xBD	; 189
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	80 83       	st	Z, r24
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	01 5c       	subi	r16, 0xC1	; 193
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	ed 5b       	subi	r30, 0xBD	; 189
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	f8 01       	movw	r30, r16
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2028:	fe 01       	movw	r30, r28
    202a:	ff 96       	adiw	r30, 0x3f	; 63
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e af       	std	Y+62, r25	; 0x3e
    204a:	8d af       	std	Y+61, r24	; 0x3d
    204c:	46 c0       	rjmp	.+140    	; 0x20da <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    204e:	fe 01       	movw	r30, r28
    2050:	ff 96       	adiw	r30, 0x3f	; 63
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	64 f5       	brge	.+88     	; 0x20c2 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	fe 01       	movw	r30, r28
    206c:	ed 5b       	subi	r30, 0xBD	; 189
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e af       	std	Y+62, r25	; 0x3e
    2096:	8d af       	std	Y+61, r24	; 0x3d
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_displayCharacter+0x478>
    209a:	88 ec       	ldi	r24, 0xC8	; 200
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9c af       	std	Y+60, r25	; 0x3c
    20a0:	8b af       	std	Y+59, r24	; 0x3b
    20a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    20a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayCharacter+0x466>
    20aa:	9c af       	std	Y+60, r25	; 0x3c
    20ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    20b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9e af       	std	Y+62, r25	; 0x3e
    20b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <LCD_displayCharacter+0x45a>
    20c0:	16 c0       	rjmp	.+44     	; 0x20ee <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	fe 01       	movw	r30, r28
    20c4:	ff 96       	adiw	r30, 0x3f	; 63
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e af       	std	Y+62, r25	; 0x3e
    20d8:	8d af       	std	Y+61, r24	; 0x3d
    20da:	8d ad       	ldd	r24, Y+61	; 0x3d
    20dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    20de:	9a af       	std	Y+58, r25	; 0x3a
    20e0:	89 af       	std	Y+57, r24	; 0x39
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_displayCharacter+0x4a6>
    20ea:	9a af       	std	Y+58, r25	; 0x3a
    20ec:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e8       	ldi	r26, 0x80	; 128
    20fe:	bf e3       	ldi	r27, 0x3F	; 63
    2100:	8d ab       	std	Y+53, r24	; 0x35
    2102:	9e ab       	std	Y+54, r25	; 0x36
    2104:	af ab       	std	Y+55, r26	; 0x37
    2106:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6d a9       	ldd	r22, Y+53	; 0x35
    210a:	7e a9       	ldd	r23, Y+54	; 0x36
    210c:	8f a9       	ldd	r24, Y+55	; 0x37
    210e:	98 ad       	ldd	r25, Y+56	; 0x38
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	89 ab       	std	Y+49, r24	; 0x31
    2122:	9a ab       	std	Y+50, r25	; 0x32
    2124:	ab ab       	std	Y+51, r26	; 0x33
    2126:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2128:	69 a9       	ldd	r22, Y+49	; 0x31
    212a:	7a a9       	ldd	r23, Y+50	; 0x32
    212c:	8b a9       	ldd	r24, Y+51	; 0x33
    212e:	9c a9       	ldd	r25, Y+52	; 0x34
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	98 ab       	std	Y+48, r25	; 0x30
    2146:	8f a7       	std	Y+47, r24	; 0x2f
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    214a:	69 a9       	ldd	r22, Y+49	; 0x31
    214c:	7a a9       	ldd	r23, Y+50	; 0x32
    214e:	8b a9       	ldd	r24, Y+51	; 0x33
    2150:	9c a9       	ldd	r25, Y+52	; 0x34
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6d a9       	ldd	r22, Y+53	; 0x35
    2164:	7e a9       	ldd	r23, Y+54	; 0x36
    2166:	8f a9       	ldd	r24, Y+55	; 0x37
    2168:	98 ad       	ldd	r25, Y+56	; 0x38
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	98 ab       	std	Y+48, r25	; 0x30
    2188:	8f a7       	std	Y+47, r24	; 0x2f
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_displayCharacter+0x56a>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9e a7       	std	Y+46, r25	; 0x2e
    2192:	8d a7       	std	Y+45, r24	; 0x2d
    2194:	8d a5       	ldd	r24, Y+45	; 0x2d
    2196:	9e a5       	ldd	r25, Y+46	; 0x2e
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_displayCharacter+0x558>
    219c:	9e a7       	std	Y+46, r25	; 0x2e
    219e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a2:	98 a9       	ldd	r25, Y+48	; 0x30
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	98 ab       	std	Y+48, r25	; 0x30
    21a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	98 a9       	ldd	r25, Y+48	; 0x30
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_displayCharacter+0x54c>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	69 a9       	ldd	r22, Y+49	; 0x31
    21b6:	7a a9       	ldd	r23, Y+50	; 0x32
    21b8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ba:	9c a9       	ldd	r25, Y+52	; 0x34
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	98 ab       	std	Y+48, r25	; 0x30
    21c6:	8f a7       	std	Y+47, r24	; 0x2f
    21c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ca:	98 a9       	ldd	r25, Y+48	; 0x30
    21cc:	9c a7       	std	Y+44, r25	; 0x2c
    21ce:	8b a7       	std	Y+43, r24	; 0x2b
    21d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_displayCharacter+0x594>
    21d8:	9c a7       	std	Y+44, r25	; 0x2c
    21da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e8       	ldi	r26, 0x80	; 128
    21ec:	bf e3       	ldi	r27, 0x3F	; 63
    21ee:	8f a3       	std	Y+39, r24	; 0x27
    21f0:	98 a7       	std	Y+40, r25	; 0x28
    21f2:	a9 a7       	std	Y+41, r26	; 0x29
    21f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6f a1       	ldd	r22, Y+39	; 0x27
    21f8:	78 a5       	ldd	r23, Y+40	; 0x28
    21fa:	89 a5       	ldd	r24, Y+41	; 0x29
    21fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8b a3       	std	Y+35, r24	; 0x23
    2210:	9c a3       	std	Y+36, r25	; 0x24
    2212:	ad a3       	std	Y+37, r26	; 0x25
    2214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2216:	6b a1       	ldd	r22, Y+35	; 0x23
    2218:	7c a1       	ldd	r23, Y+36	; 0x24
    221a:	8d a1       	ldd	r24, Y+37	; 0x25
    221c:	9e a1       	ldd	r25, Y+38	; 0x26
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9a a3       	std	Y+34, r25	; 0x22
    2234:	89 a3       	std	Y+33, r24	; 0x21
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6f a1       	ldd	r22, Y+39	; 0x27
    2252:	78 a5       	ldd	r23, Y+40	; 0x28
    2254:	89 a5       	ldd	r24, Y+41	; 0x29
    2256:	9a a5       	ldd	r25, Y+42	; 0x2a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <LCD_displayCharacter+0x658>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 a3       	std	Y+32, r25	; 0x20
    2280:	8f 8f       	std	Y+31, r24	; 0x1f
    2282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2284:	98 a1       	ldd	r25, Y+32	; 0x20
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_displayCharacter+0x646>
    228a:	98 a3       	std	Y+32, r25	; 0x20
    228c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	89 a1       	ldd	r24, Y+33	; 0x21
    2290:	9a a1       	ldd	r25, Y+34	; 0x22
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9a a3       	std	Y+34, r25	; 0x22
    2296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <LCD_displayCharacter+0x63a>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	8d 8f       	std	Y+29, r24	; 0x1d
    22be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_displayCharacter+0x682>
    22c6:	9e 8f       	std	Y+30, r25	; 0x1e
    22c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    22ca:	fe 01       	movw	r30, r28
    22cc:	ed 59       	subi	r30, 0x9D	; 157
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	98 2f       	mov	r25, r24
    22d4:	91 70       	andi	r25, 0x01	; 1
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	64 e0       	ldi	r22, 0x04	; 4
    22da:	49 2f       	mov	r20, r25
    22dc:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 59       	subi	r30, 0x9D	; 157
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	82 70       	andi	r24, 0x02	; 2
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	95 95       	asr	r25
    22f2:	87 95       	ror	r24
    22f4:	98 2f       	mov	r25, r24
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	65 e0       	ldi	r22, 0x05	; 5
    22fa:	49 2f       	mov	r20, r25
    22fc:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2300:	fe 01       	movw	r30, r28
    2302:	ed 59       	subi	r30, 0x9D	; 157
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	84 70       	andi	r24, 0x04	; 4
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	95 95       	asr	r25
    2312:	87 95       	ror	r24
    2314:	95 95       	asr	r25
    2316:	87 95       	ror	r24
    2318:	98 2f       	mov	r25, r24
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	66 e0       	ldi	r22, 0x06	; 6
    231e:	49 2f       	mov	r20, r25
    2320:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2324:	fe 01       	movw	r30, r28
    2326:	ed 59       	subi	r30, 0x9D	; 157
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	88 70       	andi	r24, 0x08	; 8
    2332:	90 70       	andi	r25, 0x00	; 0
    2334:	95 95       	asr	r25
    2336:	87 95       	ror	r24
    2338:	95 95       	asr	r25
    233a:	87 95       	ror	r24
    233c:	95 95       	asr	r25
    233e:	87 95       	ror	r24
    2340:	98 2f       	mov	r25, r24
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	67 e0       	ldi	r22, 0x07	; 7
    2346:	49 2f       	mov	r20, r25
    2348:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e8       	ldi	r26, 0x80	; 128
    2352:	bf e3       	ldi	r27, 0x3F	; 63
    2354:	89 8f       	std	Y+25, r24	; 0x19
    2356:	9a 8f       	std	Y+26, r25	; 0x1a
    2358:	ab 8f       	std	Y+27, r26	; 0x1b
    235a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	69 8d       	ldd	r22, Y+25	; 0x19
    235e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8d 8b       	std	Y+21, r24	; 0x15
    2376:	9e 8b       	std	Y+22, r25	; 0x16
    2378:	af 8b       	std	Y+23, r26	; 0x17
    237a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	8b 8b       	std	Y+19, r24	; 0x13
    239c:	3f c0       	rjmp	.+126    	; 0x241c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    239e:	6d 89       	ldd	r22, Y+21	; 0x15
    23a0:	7e 89       	ldd	r23, Y+22	; 0x16
    23a2:	8f 89       	ldd	r24, Y+23	; 0x17
    23a4:	98 8d       	ldd	r25, Y+24	; 0x18
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	69 8d       	ldd	r22, Y+25	; 0x19
    23b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <LCD_displayCharacter+0x7be>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9a 8b       	std	Y+18, r25	; 0x12
    23e6:	89 8b       	std	Y+17, r24	; 0x11
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	9a 89       	ldd	r25, Y+18	; 0x12
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_displayCharacter+0x7ac>
    23f0:	9a 8b       	std	Y+18, r25	; 0x12
    23f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <LCD_displayCharacter+0x7a0>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6d 89       	ldd	r22, Y+21	; 0x15
    240a:	7e 89       	ldd	r23, Y+22	; 0x16
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9c 8b       	std	Y+20, r25	; 0x14
    241a:	8b 8b       	std	Y+19, r24	; 0x13
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	98 8b       	std	Y+16, r25	; 0x10
    2422:	8f 87       	std	Y+15, r24	; 0x0f
    2424:	8f 85       	ldd	r24, Y+15	; 0x0f
    2426:	98 89       	ldd	r25, Y+16	; 0x10
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_displayCharacter+0x7e8>
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	bf e3       	ldi	r27, 0x3F	; 63
    2442:	8b 87       	std	Y+11, r24	; 0x0b
    2444:	9c 87       	std	Y+12, r25	; 0x0c
    2446:	ad 87       	std	Y+13, r26	; 0x0d
    2448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	6b 85       	ldd	r22, Y+11	; 0x0b
    244c:	7c 85       	ldd	r23, Y+12	; 0x0c
    244e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2450:	9e 85       	ldd	r25, Y+14	; 0x0e
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a ef       	ldi	r20, 0xFA	; 250
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8f 83       	std	Y+7, r24	; 0x07
    2464:	98 87       	std	Y+8, r25	; 0x08
    2466:	a9 87       	std	Y+9, r26	; 0x09
    2468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	3f c0       	rjmp	.+126    	; 0x250a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	78 85       	ldd	r23, Y+8	; 0x08
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <LCD_displayCharacter+0x8ac>
    24ce:	88 ec       	ldi	r24, 0xC8	; 200
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_displayCharacter+0x89a>
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <LCD_displayCharacter+0x88e>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_displayCharacter+0x8d6>
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    251e:	cd 59       	subi	r28, 0x9D	; 157
    2520:	df 4f       	sbci	r29, 0xFF	; 255
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <LCD_displayString+0x6>
    253c:	0f 92       	push	r0
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2546:	19 82       	std	Y+1, r1	; 0x01
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	fc 01       	movw	r30, r24
    2556:	e2 0f       	add	r30, r18
    2558:	f3 1f       	adc	r31, r19
    255a:	80 81       	ld	r24, Z
    255c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
		i++;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	fc 01       	movw	r30, r24
    2572:	e2 0f       	add	r30, r18
    2574:	f3 1f       	adc	r31, r19
    2576:	80 81       	ld	r24, Z
    2578:	88 23       	and	r24, r24
    257a:	39 f7       	brne	.-50     	; 0x254a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <LCD_moveCursor+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <LCD_moveCursor+0x8>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	8a 83       	std	Y+2, r24	; 0x02
    2598:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3d 83       	std	Y+5, r19	; 0x05
    25a2:	2c 83       	std	Y+4, r18	; 0x04
    25a4:	8c 81       	ldd	r24, Y+4	; 0x04
    25a6:	9d 81       	ldd	r25, Y+5	; 0x05
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	91 05       	cpc	r25, r1
    25ac:	c1 f0       	breq	.+48     	; 0x25de <LCD_moveCursor+0x56>
    25ae:	2c 81       	ldd	r18, Y+4	; 0x04
    25b0:	3d 81       	ldd	r19, Y+5	; 0x05
    25b2:	22 30       	cpi	r18, 0x02	; 2
    25b4:	31 05       	cpc	r19, r1
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <LCD_moveCursor+0x3a>
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	9d 81       	ldd	r25, Y+5	; 0x05
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	61 f0       	breq	.+24     	; 0x25d8 <LCD_moveCursor+0x50>
    25c0:	19 c0       	rjmp	.+50     	; 0x25f4 <LCD_moveCursor+0x6c>
    25c2:	2c 81       	ldd	r18, Y+4	; 0x04
    25c4:	3d 81       	ldd	r19, Y+5	; 0x05
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	69 f0       	breq	.+26     	; 0x25e6 <LCD_moveCursor+0x5e>
    25cc:	8c 81       	ldd	r24, Y+4	; 0x04
    25ce:	9d 81       	ldd	r25, Y+5	; 0x05
    25d0:	83 30       	cpi	r24, 0x03	; 3
    25d2:	91 05       	cpc	r25, r1
    25d4:	61 f0       	breq	.+24     	; 0x25ee <LCD_moveCursor+0x66>
    25d6:	0e c0       	rjmp	.+28     	; 0x25f4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	0b c0       	rjmp	.+22     	; 0x25f4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	80 5c       	subi	r24, 0xC0	; 192
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	07 c0       	rjmp	.+14     	; 0x25f4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	80 5f       	subi	r24, 0xF0	; 240
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	80 5b       	subi	r24, 0xB0	; 176
    25f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	80 68       	ori	r24, 0x80	; 128
    25f8:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
}
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <LCD_displayStringRowColumn+0x6>
    2612:	00 d0       	rcall	.+0      	; 0x2614 <LCD_displayStringRowColumn+0x8>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	6a 83       	std	Y+2, r22	; 0x02
    261c:	5c 83       	std	Y+4, r21	; 0x04
    261e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	6a 81       	ldd	r22, Y+2	; 0x02
    2624:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	62 97       	sbiw	r28, 0x12	; 18
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	9a 8b       	std	Y+18, r25	; 0x12
    2654:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	9a 89       	ldd	r25, Y+18	; 0x12
    265a:	9e 01       	movw	r18, r28
    265c:	2f 5f       	subi	r18, 0xFF	; 255
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	b9 01       	movw	r22, r18
    2662:	4a e0       	ldi	r20, 0x0A	; 10
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <itoa>
   LCD_displayString(buff); /* Display the string */
    266a:	ce 01       	movw	r24, r28
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
}
    2672:	62 96       	adiw	r28, 0x12	; 18
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
}
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <__vector_11>:
};

ISR(USART_RXC_vect)


{
    2698:	1f 92       	push	r1
    269a:	0f 92       	push	r0
    269c:	0f b6       	in	r0, 0x3f	; 63
    269e:	0f 92       	push	r0
    26a0:	11 24       	eor	r1, r1
    26a2:	2f 93       	push	r18
    26a4:	3f 93       	push	r19
    26a6:	4f 93       	push	r20
    26a8:	5f 93       	push	r21
    26aa:	6f 93       	push	r22
    26ac:	7f 93       	push	r23
    26ae:	8f 93       	push	r24
    26b0:	9f 93       	push	r25
    26b2:	af 93       	push	r26
    26b4:	bf 93       	push	r27
    26b6:	ef 93       	push	r30
    26b8:	ff 93       	push	r31
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_INDEX,PIN1,GPIO_HIGH);
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>
	flag=1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	80 93 ec 00 	sts	0x00EC, r24

}
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <main>:


int main (void)
{
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	c8 5a       	subi	r28, 0xA8	; 168
    2706:	d0 40       	sbci	r29, 0x00	; 0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(PORTC_INDEX,PIN1,PIN_OUTPUT_);
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 82 06 	call	0xd04	; 0xd04 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_INDEX,PIN1,GPIO_LOW);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_writePin>

	UART_initialize(&uart_element);
    2726:	8d ed       	ldi	r24, 0xDD	; 221
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 a4 1b 	call	0x3748	; 0x3748 <UART_initialize>
	LCD_init();
    272e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_init>
	LCD_displayString("system loading..");
    2732:	80 e6       	ldi	r24, 0x60	; 96
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
    273a:	fe 01       	movw	r30, r28
    273c:	eb 55       	subi	r30, 0x5B	; 91
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	aa ef       	ldi	r26, 0xFA	; 250
    2746:	b3 e4       	ldi	r27, 0x43	; 67
    2748:	80 83       	st	Z, r24
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	a2 83       	std	Z+2, r26	; 0x02
    274e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2750:	8e 01       	movw	r16, r28
    2752:	0f 55       	subi	r16, 0x5F	; 95
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	fe 01       	movw	r30, r28
    2758:	eb 55       	subi	r30, 0x5B	; 91
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a ef       	ldi	r20, 0xFA	; 250
    276a:	54 e4       	ldi	r21, 0x44	; 68
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	80 83       	st	Z, r24
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	a2 83       	std	Z+2, r26	; 0x02
    277c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277e:	fe 01       	movw	r30, r28
    2780:	ef 55       	subi	r30, 0x5F	; 95
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	44 f4       	brge	.+16     	; 0x27ac <main+0xb4>
		__ticks = 1;
    279c:	fe 01       	movw	r30, r28
    279e:	e1 56       	subi	r30, 0x61	; 97
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	64 c0       	rjmp	.+200    	; 0x2874 <main+0x17c>
	else if (__tmp > 65535)
    27ac:	fe 01       	movw	r30, r28
    27ae:	ef 55       	subi	r30, 0x5F	; 95
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <main+0xd4>
    27ca:	43 c0       	rjmp	.+134    	; 0x2852 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	fe 01       	movw	r30, r28
    27ce:	eb 55       	subi	r30, 0x5B	; 91
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8e 01       	movw	r16, r28
    27ec:	01 56       	subi	r16, 0x61	; 97
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	f8 01       	movw	r30, r16
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
    2802:	1f c0       	rjmp	.+62     	; 0x2842 <main+0x14a>
    2804:	fe 01       	movw	r30, r28
    2806:	e3 56       	subi	r30, 0x63	; 99
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	88 ec       	ldi	r24, 0xC8	; 200
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	fe 01       	movw	r30, r28
    2814:	e3 56       	subi	r30, 0x63	; 99
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <main+0x124>
    2820:	fe 01       	movw	r30, r28
    2822:	e3 56       	subi	r30, 0x63	; 99
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	de 01       	movw	r26, r28
    282c:	a1 56       	subi	r26, 0x61	; 97
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e1 56       	subi	r30, 0x61	; 97
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	fe 01       	movw	r30, r28
    2844:	e1 56       	subi	r30, 0x61	; 97
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	d1 f6       	brne	.-76     	; 0x2804 <main+0x10c>
    2850:	27 c0       	rjmp	.+78     	; 0x28a0 <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	8e 01       	movw	r16, r28
    2854:	01 56       	subi	r16, 0x61	; 97
    2856:	1f 4f       	sbci	r17, 0xFF	; 255
    2858:	fe 01       	movw	r30, r28
    285a:	ef 55       	subi	r30, 0x5F	; 95
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	f8 01       	movw	r30, r16
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	80 83       	st	Z, r24
    2874:	de 01       	movw	r26, r28
    2876:	a5 56       	subi	r26, 0x65	; 101
    2878:	bf 4f       	sbci	r27, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	e1 56       	subi	r30, 0x61	; 97
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	8d 93       	st	X+, r24
    2886:	9c 93       	st	X, r25
    2888:	fe 01       	movw	r30, r28
    288a:	e5 56       	subi	r30, 0x65	; 101
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <main+0x19a>
    2896:	fe 01       	movw	r30, r28
    2898:	e5 56       	subi	r30, 0x65	; 101
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
	_delay_ms(500);
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
	LCD_displayString("Waiting for GPS");
    28a6:	81 e7       	ldi	r24, 0x71	; 113
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
    28ae:	fe 01       	movw	r30, r28
    28b0:	e9 56       	subi	r30, 0x69	; 105
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	aa ef       	ldi	r26, 0xFA	; 250
    28ba:	b3 e4       	ldi	r27, 0x43	; 67
    28bc:	80 83       	st	Z, r24
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	a2 83       	std	Z+2, r26	; 0x02
    28c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	8e 01       	movw	r16, r28
    28c6:	0d 56       	subi	r16, 0x6D	; 109
    28c8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 56       	subi	r30, 0x69	; 105
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	f8 01       	movw	r30, r16
    28ea:	80 83       	st	Z, r24
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	a2 83       	std	Z+2, r26	; 0x02
    28f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f2:	fe 01       	movw	r30, r28
    28f4:	ed 56       	subi	r30, 0x6D	; 109
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	44 f4       	brge	.+16     	; 0x2920 <main+0x228>
		__ticks = 1;
    2910:	fe 01       	movw	r30, r28
    2912:	ef 56       	subi	r30, 0x6F	; 111
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
    291e:	64 c0       	rjmp	.+200    	; 0x29e8 <main+0x2f0>
	else if (__tmp > 65535)
    2920:	fe 01       	movw	r30, r28
    2922:	ed 56       	subi	r30, 0x6D	; 109
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	0c f0       	brlt	.+2      	; 0x2940 <main+0x248>
    293e:	43 c0       	rjmp	.+134    	; 0x29c6 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	fe 01       	movw	r30, r28
    2942:	e9 56       	subi	r30, 0x69	; 105
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8e 01       	movw	r16, r28
    2960:	0f 56       	subi	r16, 0x6F	; 111
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	f8 01       	movw	r30, r16
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
    2976:	1f c0       	rjmp	.+62     	; 0x29b6 <main+0x2be>
    2978:	fe 01       	movw	r30, r28
    297a:	e1 57       	subi	r30, 0x71	; 113
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
    2986:	fe 01       	movw	r30, r28
    2988:	e1 57       	subi	r30, 0x71	; 113
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	91 81       	ldd	r25, Z+1	; 0x01
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <main+0x298>
    2994:	fe 01       	movw	r30, r28
    2996:	e1 57       	subi	r30, 0x71	; 113
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	de 01       	movw	r26, r28
    29a0:	af 56       	subi	r26, 0x6F	; 111
    29a2:	bf 4f       	sbci	r27, 0xFF	; 255
    29a4:	fe 01       	movw	r30, r28
    29a6:	ef 56       	subi	r30, 0x6F	; 111
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	9c 93       	st	X, r25
    29b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	fe 01       	movw	r30, r28
    29b8:	ef 56       	subi	r30, 0x6F	; 111
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	d1 f6       	brne	.-76     	; 0x2978 <main+0x280>
    29c4:	27 c0       	rjmp	.+78     	; 0x2a14 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	8e 01       	movw	r16, r28
    29c8:	0f 56       	subi	r16, 0x6F	; 111
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 56       	subi	r30, 0x6D	; 109
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	f8 01       	movw	r30, r16
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
    29e8:	de 01       	movw	r26, r28
    29ea:	a3 57       	subi	r26, 0x73	; 115
    29ec:	bf 4f       	sbci	r27, 0xFF	; 255
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 56       	subi	r30, 0x6F	; 111
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	8d 93       	st	X+, r24
    29fa:	9c 93       	st	X, r25
    29fc:	fe 01       	movw	r30, r28
    29fe:	e3 57       	subi	r30, 0x73	; 115
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <main+0x30e>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e3 57       	subi	r30, 0x73	; 115
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
	_delay_ms(500);
	SREG = SREG |(1<<7);
    2a14:	af e5       	ldi	r26, 0x5F	; 95
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ef e5       	ldi	r30, 0x5F	; 95
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 68       	ori	r24, 0x80	; 128
    2a20:	8c 93       	st	X, r24
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
    2a28:	13 c0       	rjmp	.+38     	; 0x2a50 <main+0x358>
	while (1)
	{
		while (i != 80 )
		{
			data = UART_recieveByte();
    2a2a:	0e 94 87 1c 	call	0x390e	; 0x390e <UART_recieveByte>
    2a2e:	80 93 49 01 	sts	0x0149, r24
			data_arr_X[i] = data ;
    2a32:	80 91 ed 00 	lds	r24, 0x00ED
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	20 91 49 01 	lds	r18, 0x0149
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e0 51       	subi	r30, 0x10	; 16
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	20 83       	st	Z, r18
			i++;
    2a46:	80 91 ed 00 	lds	r24, 0x00ED
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	80 93 ed 00 	sts	0x00ED, r24
	_delay_ms(500);
	SREG = SREG |(1<<7);
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	while (1)
	{
		while (i != 80 )
    2a50:	80 91 ed 00 	lds	r24, 0x00ED
    2a54:	80 35       	cpi	r24, 0x50	; 80
    2a56:	49 f7       	brne	.-46     	; 0x2a2a <main+0x332>
			data_arr_X[i] = data ;
			i++;

		}
		while (1) {
			LCD_displayString(" UTC time :");
    2a58:	81 e8       	ldi	r24, 0x81	; 129
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
			LCD_moveCursor(1,1);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_moveCursor>
			for (i=10;data_arr_X[i] != ',';i++)
    2a68:	8a e0       	ldi	r24, 0x0A	; 10
    2a6a:	80 93 ed 00 	sts	0x00ED, r24
    2a6e:	c3 c0       	rjmp	.+390    	; 0x2bf6 <main+0x4fe>
			{

				//LCD_sendCommand(LCD_CLEAR_COMMAND);

				LCD_displayCharacter(data_arr_X[i]);
    2a70:	80 91 ed 00 	lds	r24, 0x00ED
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e0 51       	subi	r30, 0x10	; 16
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e7 57       	subi	r30, 0x77	; 119
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 ea       	ldi	r26, 0xA0	; 160
    2a90:	b1 e4       	ldi	r27, 0x41	; 65
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0b 57       	subi	r16, 0x7B	; 123
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e7 57       	subi	r30, 0x77	; 119
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 57       	subi	r30, 0x7B	; 123
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <main+0x3fe>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 57       	subi	r30, 0x7D	; 125
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	64 c0       	rjmp	.+200    	; 0x2bbe <main+0x4c6>
	else if (__tmp > 65535)
    2af6:	fe 01       	movw	r30, r28
    2af8:	eb 57       	subi	r30, 0x7B	; 123
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <main+0x41e>
    2b14:	43 c0       	rjmp	.+134    	; 0x2b9c <main+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 57       	subi	r30, 0x77	; 119
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 01       	movw	r16, r28
    2b36:	0d 57       	subi	r16, 0x7D	; 125
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	1f c0       	rjmp	.+62     	; 0x2b8c <main+0x494>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ef 57       	subi	r30, 0x7F	; 127
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	88 ec       	ldi	r24, 0xC8	; 200
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ef 57       	subi	r30, 0x7F	; 127
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <main+0x46e>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ef 57       	subi	r30, 0x7F	; 127
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	de 01       	movw	r26, r28
    2b76:	ad 57       	subi	r26, 0x7D	; 125
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ed 57       	subi	r30, 0x7D	; 125
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	9c 93       	st	X, r25
    2b8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ed 57       	subi	r30, 0x7D	; 125
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	d1 f6       	brne	.-76     	; 0x2b4e <main+0x456>
    2b9a:	28 c0       	rjmp	.+80     	; 0x2bec <main+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	0d 57       	subi	r16, 0x7D	; 125
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 57       	subi	r30, 0x7B	; 123
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	de 01       	movw	r26, r28
    2bc0:	a1 58       	subi	r26, 0x81	; 129
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 57       	subi	r30, 0x7D	; 125
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e1 58       	subi	r30, 0x81	; 129
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <main+0x4e6>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e1 58       	subi	r30, 0x81	; 129
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24

		}
		while (1) {
			LCD_displayString(" UTC time :");
			LCD_moveCursor(1,1);
			for (i=10;data_arr_X[i] != ',';i++)
    2bec:	80 91 ed 00 	lds	r24, 0x00ED
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	80 93 ed 00 	sts	0x00ED, r24
    2bf6:	80 91 ed 00 	lds	r24, 0x00ED
    2bfa:	88 2f       	mov	r24, r24
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	fc 01       	movw	r30, r24
    2c00:	e0 51       	subi	r30, 0x10	; 16
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	8c 32       	cpi	r24, 0x2C	; 44
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <main+0x514>
    2c0a:	32 cf       	rjmp	.-412    	; 0x2a70 <main+0x378>
				LCD_displayCharacter(data_arr_X[i]);
				_delay_ms(20);


			}
			LCD_displayCharacter(data_arr_X[19]);
    2c0c:	80 91 03 01 	lds	r24, 0x0103
    2c10:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    2c14:	fe 01       	movw	r30, r28
    2c16:	e5 58       	subi	r30, 0x85	; 133
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	aa e7       	ldi	r26, 0x7A	; 122
    2c20:	b4 e4       	ldi	r27, 0x44	; 68
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	8e 01       	movw	r16, r28
    2c2c:	09 58       	subi	r16, 0x89	; 137
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	fe 01       	movw	r30, r28
    2c32:	e5 58       	subi	r30, 0x85	; 133
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a ef       	ldi	r20, 0xFA	; 250
    2c44:	54 e4       	ldi	r21, 0x44	; 68
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	f8 01       	movw	r30, r16
    2c50:	80 83       	st	Z, r24
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	a2 83       	std	Z+2, r26	; 0x02
    2c56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e9 58       	subi	r30, 0x89	; 137
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	44 f4       	brge	.+16     	; 0x2c86 <main+0x58e>
		__ticks = 1;
    2c76:	fe 01       	movw	r30, r28
    2c78:	eb 58       	subi	r30, 0x8B	; 139
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    2c84:	64 c0       	rjmp	.+200    	; 0x2d4e <main+0x656>
	else if (__tmp > 65535)
    2c86:	fe 01       	movw	r30, r28
    2c88:	e9 58       	subi	r30, 0x89	; 137
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	0c f0       	brlt	.+2      	; 0x2ca6 <main+0x5ae>
    2ca4:	43 c0       	rjmp	.+134    	; 0x2d2c <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e5 58       	subi	r30, 0x85	; 133
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8e 01       	movw	r16, r28
    2cc6:	0b 58       	subi	r16, 0x8B	; 139
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	f8 01       	movw	r30, r16
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	80 83       	st	Z, r24
    2cdc:	1f c0       	rjmp	.+62     	; 0x2d1c <main+0x624>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ed 58       	subi	r30, 0x8D	; 141
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	88 ec       	ldi	r24, 0xC8	; 200
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
    2cec:	fe 01       	movw	r30, r28
    2cee:	ed 58       	subi	r30, 0x8D	; 141
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0x5fe>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 58       	subi	r30, 0x8D	; 141
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d04:	de 01       	movw	r26, r28
    2d06:	ab 58       	subi	r26, 0x8B	; 139
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	eb 58       	subi	r30, 0x8B	; 139
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	9c 93       	st	X, r25
    2d1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	eb 58       	subi	r30, 0x8B	; 139
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	d1 f6       	brne	.-76     	; 0x2cde <main+0x5e6>
    2d2a:	27 c0       	rjmp	.+78     	; 0x2d7a <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	8e 01       	movw	r16, r28
    2d2e:	0b 58       	subi	r16, 0x8B	; 139
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	e9 58       	subi	r30, 0x89	; 137
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	f8 01       	movw	r30, r16
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	de 01       	movw	r26, r28
    2d50:	af 58       	subi	r26, 0x8F	; 143
    2d52:	bf 4f       	sbci	r27, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	eb 58       	subi	r30, 0x8B	; 139
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	8d 93       	st	X+, r24
    2d60:	9c 93       	st	X, r25
    2d62:	fe 01       	movw	r30, r28
    2d64:	ef 58       	subi	r30, 0x8F	; 143
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <main+0x674>
    2d70:	fe 01       	movw	r30, r28
    2d72:	ef 58       	subi	r30, 0x8F	; 143
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24
			_delay_ms(1000);

			// ************************
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>

			LCD_displayString("Latitude : ");
    2d80:	8d e8       	ldi	r24, 0x8D	; 141
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
			LCD_moveCursor(1,1);
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	61 e0       	ldi	r22, 0x01	; 1
    2d8c:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_moveCursor>
			for (i=23;data_arr_X[i] != ',';i++)
    2d90:	87 e1       	ldi	r24, 0x17	; 23
    2d92:	80 93 ed 00 	sts	0x00ED, r24
    2d96:	c3 c0       	rjmp	.+390    	; 0x2f1e <main+0x826>
			{


				LCD_displayCharacter(data_arr_X[i]);
    2d98:	80 91 ed 00 	lds	r24, 0x00ED
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	fc 01       	movw	r30, r24
    2da2:	e0 51       	subi	r30, 0x10	; 16
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    2dac:	fe 01       	movw	r30, r28
    2dae:	e3 59       	subi	r30, 0x93	; 147
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 ea       	ldi	r26, 0xA0	; 160
    2db8:	b1 e4       	ldi	r27, 0x41	; 65
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	8e 01       	movw	r16, r28
    2dc4:	07 59       	subi	r16, 0x97	; 151
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e3 59       	subi	r30, 0x93	; 147
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a ef       	ldi	r20, 0xFA	; 250
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2df0:	fe 01       	movw	r30, r28
    2df2:	e7 59       	subi	r30, 0x97	; 151
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e8       	ldi	r20, 0x80	; 128
    2e04:	5f e3       	ldi	r21, 0x3F	; 63
    2e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	44 f4       	brge	.+16     	; 0x2e1e <main+0x726>
		__ticks = 1;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e9 59       	subi	r30, 0x99	; 153
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
    2e1c:	64 c0       	rjmp	.+200    	; 0x2ee6 <main+0x7ee>
	else if (__tmp > 65535)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e7 59       	subi	r30, 0x97	; 151
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <main+0x746>
    2e3c:	43 c0       	rjmp	.+134    	; 0x2ec4 <main+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e3 59       	subi	r30, 0x93	; 147
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8e 01       	movw	r16, r28
    2e5e:	09 59       	subi	r16, 0x99	; 153
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	f8 01       	movw	r30, r16
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	1f c0       	rjmp	.+62     	; 0x2eb4 <main+0x7bc>
    2e76:	fe 01       	movw	r30, r28
    2e78:	eb 59       	subi	r30, 0x9B	; 155
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	80 83       	st	Z, r24
    2e84:	fe 01       	movw	r30, r28
    2e86:	eb 59       	subi	r30, 0x9B	; 155
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x796>
    2e92:	fe 01       	movw	r30, r28
    2e94:	eb 59       	subi	r30, 0x9B	; 155
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	de 01       	movw	r26, r28
    2e9e:	a9 59       	subi	r26, 0x99	; 153
    2ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e9 59       	subi	r30, 0x99	; 153
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	9c 93       	st	X, r25
    2eb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e9 59       	subi	r30, 0x99	; 153
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	d1 f6       	brne	.-76     	; 0x2e76 <main+0x77e>
    2ec2:	28 c0       	rjmp	.+80     	; 0x2f14 <main+0x81c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	8e 01       	movw	r16, r28
    2ec6:	09 59       	subi	r16, 0x99	; 153
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e7 59       	subi	r30, 0x97	; 151
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    2ee6:	de 01       	movw	r26, r28
    2ee8:	ad 59       	subi	r26, 0x9D	; 157
    2eea:	bf 4f       	sbci	r27, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	e9 59       	subi	r30, 0x99	; 153
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	11 96       	adiw	r26, 0x01	; 1
    2ef8:	9c 93       	st	X, r25
    2efa:	8e 93       	st	-X, r24
    2efc:	fe 01       	movw	r30, r28
    2efe:	ed 59       	subi	r30, 0x9D	; 157
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <main+0x80e>
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	ed 59       	subi	r30, 0x9D	; 157
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	80 83       	st	Z, r24
			// ************************
			LCD_sendCommand(LCD_CLEAR_COMMAND);

			LCD_displayString("Latitude : ");
			LCD_moveCursor(1,1);
			for (i=23;data_arr_X[i] != ',';i++)
    2f14:	80 91 ed 00 	lds	r24, 0x00ED
    2f18:	8f 5f       	subi	r24, 0xFF	; 255
    2f1a:	80 93 ed 00 	sts	0x00ED, r24
    2f1e:	80 91 ed 00 	lds	r24, 0x00ED
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	fc 01       	movw	r30, r24
    2f28:	e0 51       	subi	r30, 0x10	; 16
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8c 32       	cpi	r24, 0x2C	; 44
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <main+0x83c>
    2f32:	32 cf       	rjmp	.-412    	; 0x2d98 <main+0x6a0>
				LCD_displayCharacter(data_arr_X[i]);
				_delay_ms(20);


			}
			LCD_displayCharacter(data_arr_X[33]);
    2f34:	80 91 11 01 	lds	r24, 0x0111
    2f38:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e1 5a       	subi	r30, 0xA1	; 161
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	aa ef       	ldi	r26, 0xFA	; 250
    2f48:	b4 e4       	ldi	r27, 0x44	; 68
    2f4a:	80 83       	st	Z, r24
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	a2 83       	std	Z+2, r26	; 0x02
    2f50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f52:	8e 01       	movw	r16, r28
    2f54:	05 5a       	subi	r16, 0xA5	; 165
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 5a       	subi	r30, 0xA1	; 161
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4a ef       	ldi	r20, 0xFA	; 250
    2f6c:	54 e4       	ldi	r21, 0x44	; 68
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	f8 01       	movw	r30, r16
    2f78:	80 83       	st	Z, r24
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	a2 83       	std	Z+2, r26	; 0x02
    2f7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f80:	fe 01       	movw	r30, r28
    2f82:	e5 5a       	subi	r30, 0xA5	; 165
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	44 f4       	brge	.+16     	; 0x2fae <main+0x8b6>
		__ticks = 1;
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e7 5a       	subi	r30, 0xA7	; 167
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	80 83       	st	Z, r24
    2fac:	64 c0       	rjmp	.+200    	; 0x3076 <main+0x97e>
	else if (__tmp > 65535)
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e5 5a       	subi	r30, 0xA5	; 165
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	0c f0       	brlt	.+2      	; 0x2fce <main+0x8d6>
    2fcc:	43 c0       	rjmp	.+134    	; 0x3054 <main+0x95c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e1 5a       	subi	r30, 0xA1	; 161
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	93 81       	ldd	r25, Z+3	; 0x03
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e2       	ldi	r20, 0x20	; 32
    2fe2:	51 e4       	ldi	r21, 0x41	; 65
    2fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8e 01       	movw	r16, r28
    2fee:	07 5a       	subi	r16, 0xA7	; 167
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	f8 01       	movw	r30, r16
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
    3004:	1f c0       	rjmp	.+62     	; 0x3044 <main+0x94c>
    3006:	fe 01       	movw	r30, r28
    3008:	e9 5a       	subi	r30, 0xA9	; 169
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	88 ec       	ldi	r24, 0xC8	; 200
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	fe 01       	movw	r30, r28
    3016:	e9 5a       	subi	r30, 0xA9	; 169
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <main+0x926>
    3022:	fe 01       	movw	r30, r28
    3024:	e9 5a       	subi	r30, 0xA9	; 169
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302c:	de 01       	movw	r26, r28
    302e:	a7 5a       	subi	r26, 0xA7	; 167
    3030:	bf 4f       	sbci	r27, 0xFF	; 255
    3032:	fe 01       	movw	r30, r28
    3034:	e7 5a       	subi	r30, 0xA7	; 167
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	11 96       	adiw	r26, 0x01	; 1
    3040:	9c 93       	st	X, r25
    3042:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3044:	fe 01       	movw	r30, r28
    3046:	e7 5a       	subi	r30, 0xA7	; 167
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	d1 f6       	brne	.-76     	; 0x3006 <main+0x90e>
    3052:	27 c0       	rjmp	.+78     	; 0x30a2 <main+0x9aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	8e 01       	movw	r16, r28
    3056:	07 5a       	subi	r16, 0xA7	; 167
    3058:	1f 4f       	sbci	r17, 0xFF	; 255
    305a:	fe 01       	movw	r30, r28
    305c:	e5 5a       	subi	r30, 0xA5	; 165
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	f8 01       	movw	r30, r16
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
    3076:	de 01       	movw	r26, r28
    3078:	ab 5a       	subi	r26, 0xAB	; 171
    307a:	bf 4f       	sbci	r27, 0xFF	; 255
    307c:	fe 01       	movw	r30, r28
    307e:	e7 5a       	subi	r30, 0xA7	; 167
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	8d 93       	st	X+, r24
    3088:	9c 93       	st	X, r25
    308a:	fe 01       	movw	r30, r28
    308c:	eb 5a       	subi	r30, 0xAB	; 171
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	91 81       	ldd	r25, Z+1	; 0x01
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <main+0x99c>
    3098:	fe 01       	movw	r30, r28
    309a:	eb 5a       	subi	r30, 0xAB	; 171
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	80 83       	st	Z, r24


			_delay_ms(2000);

			// ************************
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>

			LCD_displayString("Longitude : ");
    30a8:	89 e9       	ldi	r24, 0x99	; 153
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
			LCD_moveCursor(1,1);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_moveCursor>
			for (i=35;data_arr_X[i] != ',';i++)
    30b8:	83 e2       	ldi	r24, 0x23	; 35
    30ba:	80 93 ed 00 	sts	0x00ED, r24
    30be:	c3 c0       	rjmp	.+390    	; 0x3246 <main+0xb4e>
			{

				//LCD_sendCommand(LCD_CLEAR_COMMAND);

				LCD_displayCharacter(data_arr_X[i]);
    30c0:	80 91 ed 00 	lds	r24, 0x00ED
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	fc 01       	movw	r30, r24
    30ca:	e0 51       	subi	r30, 0x10	; 16
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    30d4:	fe 01       	movw	r30, r28
    30d6:	ef 5a       	subi	r30, 0xAF	; 175
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 ea       	ldi	r26, 0xA0	; 160
    30e0:	b1 e4       	ldi	r27, 0x41	; 65
    30e2:	80 83       	st	Z, r24
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	a2 83       	std	Z+2, r26	; 0x02
    30e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ea:	8e 01       	movw	r16, r28
    30ec:	03 5b       	subi	r16, 0xB3	; 179
    30ee:	1f 4f       	sbci	r17, 0xFF	; 255
    30f0:	fe 01       	movw	r30, r28
    30f2:	ef 5a       	subi	r30, 0xAF	; 175
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a ef       	ldi	r20, 0xFA	; 250
    3104:	54 e4       	ldi	r21, 0x44	; 68
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	f8 01       	movw	r30, r16
    3110:	80 83       	st	Z, r24
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	a2 83       	std	Z+2, r26	; 0x02
    3116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3118:	fe 01       	movw	r30, r28
    311a:	e3 5b       	subi	r30, 0xB3	; 179
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	60 81       	ld	r22, Z
    3120:	71 81       	ldd	r23, Z+1	; 0x01
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e8       	ldi	r20, 0x80	; 128
    312c:	5f e3       	ldi	r21, 0x3F	; 63
    312e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3132:	88 23       	and	r24, r24
    3134:	44 f4       	brge	.+16     	; 0x3146 <main+0xa4e>
		__ticks = 1;
    3136:	fe 01       	movw	r30, r28
    3138:	e5 5b       	subi	r30, 0xB5	; 181
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
    3144:	64 c0       	rjmp	.+200    	; 0x320e <main+0xb16>
	else if (__tmp > 65535)
    3146:	fe 01       	movw	r30, r28
    3148:	e3 5b       	subi	r30, 0xB3	; 179
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	3f ef       	ldi	r19, 0xFF	; 255
    3158:	4f e7       	ldi	r20, 0x7F	; 127
    315a:	57 e4       	ldi	r21, 0x47	; 71
    315c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3160:	18 16       	cp	r1, r24
    3162:	0c f0       	brlt	.+2      	; 0x3166 <main+0xa6e>
    3164:	43 c0       	rjmp	.+134    	; 0x31ec <main+0xaf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3166:	fe 01       	movw	r30, r28
    3168:	ef 5a       	subi	r30, 0xAF	; 175
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e2       	ldi	r20, 0x20	; 32
    317a:	51 e4       	ldi	r21, 0x41	; 65
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8e 01       	movw	r16, r28
    3186:	05 5b       	subi	r16, 0xB5	; 181
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	f8 01       	movw	r30, r16
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	80 83       	st	Z, r24
    319c:	1f c0       	rjmp	.+62     	; 0x31dc <main+0xae4>
    319e:	fe 01       	movw	r30, r28
    31a0:	e7 5b       	subi	r30, 0xB7	; 183
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	88 ec       	ldi	r24, 0xC8	; 200
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	fe 01       	movw	r30, r28
    31ae:	e7 5b       	subi	r30, 0xB7	; 183
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	80 81       	ld	r24, Z
    31b4:	91 81       	ldd	r25, Z+1	; 0x01
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <main+0xabe>
    31ba:	fe 01       	movw	r30, r28
    31bc:	e7 5b       	subi	r30, 0xB7	; 183
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	91 83       	std	Z+1, r25	; 0x01
    31c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	de 01       	movw	r26, r28
    31c6:	a5 5b       	subi	r26, 0xB5	; 181
    31c8:	bf 4f       	sbci	r27, 0xFF	; 255
    31ca:	fe 01       	movw	r30, r28
    31cc:	e5 5b       	subi	r30, 0xB5	; 181
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	91 81       	ldd	r25, Z+1	; 0x01
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	11 96       	adiw	r26, 0x01	; 1
    31d8:	9c 93       	st	X, r25
    31da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31dc:	fe 01       	movw	r30, r28
    31de:	e5 5b       	subi	r30, 0xB5	; 181
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	d1 f6       	brne	.-76     	; 0x319e <main+0xaa6>
    31ea:	28 c0       	rjmp	.+80     	; 0x323c <main+0xb44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ec:	8e 01       	movw	r16, r28
    31ee:	05 5b       	subi	r16, 0xB5	; 181
    31f0:	1f 4f       	sbci	r17, 0xFF	; 255
    31f2:	fe 01       	movw	r30, r28
    31f4:	e3 5b       	subi	r30, 0xB3	; 179
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	60 81       	ld	r22, Z
    31fa:	71 81       	ldd	r23, Z+1	; 0x01
    31fc:	82 81       	ldd	r24, Z+2	; 0x02
    31fe:	93 81       	ldd	r25, Z+3	; 0x03
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	f8 01       	movw	r30, r16
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	80 83       	st	Z, r24
    320e:	de 01       	movw	r26, r28
    3210:	a9 5b       	subi	r26, 0xB9	; 185
    3212:	bf 4f       	sbci	r27, 0xFF	; 255
    3214:	fe 01       	movw	r30, r28
    3216:	e5 5b       	subi	r30, 0xB5	; 181
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	11 96       	adiw	r26, 0x01	; 1
    3220:	9c 93       	st	X, r25
    3222:	8e 93       	st	-X, r24
    3224:	fe 01       	movw	r30, r28
    3226:	e9 5b       	subi	r30, 0xB9	; 185
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 81       	ld	r24, Z
    322c:	91 81       	ldd	r25, Z+1	; 0x01
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <main+0xb36>
    3232:	fe 01       	movw	r30, r28
    3234:	e9 5b       	subi	r30, 0xB9	; 185
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
			// ************************
			LCD_sendCommand(LCD_CLEAR_COMMAND);

			LCD_displayString("Longitude : ");
			LCD_moveCursor(1,1);
			for (i=35;data_arr_X[i] != ',';i++)
    323c:	80 91 ed 00 	lds	r24, 0x00ED
    3240:	8f 5f       	subi	r24, 0xFF	; 255
    3242:	80 93 ed 00 	sts	0x00ED, r24
    3246:	80 91 ed 00 	lds	r24, 0x00ED
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	fc 01       	movw	r30, r24
    3250:	e0 51       	subi	r30, 0x10	; 16
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	8c 32       	cpi	r24, 0x2C	; 44
    3258:	09 f0       	breq	.+2      	; 0x325c <main+0xb64>
    325a:	32 cf       	rjmp	.-412    	; 0x30c0 <main+0x9c8>
				LCD_displayCharacter(data_arr_X[i]);
				_delay_ms(20);


			}
			LCD_displayCharacter(data_arr_X[46]);
    325c:	80 91 1e 01 	lds	r24, 0x011E
    3260:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    3264:	fe 01       	movw	r30, r28
    3266:	ed 5b       	subi	r30, 0xBD	; 189
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	aa ef       	ldi	r26, 0xFA	; 250
    3270:	b4 e4       	ldi	r27, 0x44	; 68
    3272:	80 83       	st	Z, r24
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	a2 83       	std	Z+2, r26	; 0x02
    3278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	8e 01       	movw	r16, r28
    327c:	01 5c       	subi	r16, 0xC1	; 193
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	fe 01       	movw	r30, r28
    3282:	ed 5b       	subi	r30, 0xBD	; 189
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	60 81       	ld	r22, Z
    3288:	71 81       	ldd	r23, Z+1	; 0x01
    328a:	82 81       	ldd	r24, Z+2	; 0x02
    328c:	93 81       	ldd	r25, Z+3	; 0x03
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a ef       	ldi	r20, 0xFA	; 250
    3294:	54 e4       	ldi	r21, 0x44	; 68
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	80 83       	st	Z, r24
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	a2 83       	std	Z+2, r26	; 0x02
    32a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32a8:	fe 01       	movw	r30, r28
    32aa:	ff 96       	adiw	r30, 0x3f	; 63
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e8       	ldi	r20, 0x80	; 128
    32ba:	5f e3       	ldi	r21, 0x3F	; 63
    32bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c0:	88 23       	and	r24, r24
    32c2:	2c f4       	brge	.+10     	; 0x32ce <main+0xbd6>
		__ticks = 1;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9e af       	std	Y+62, r25	; 0x3e
    32ca:	8d af       	std	Y+61, r24	; 0x3d
    32cc:	46 c0       	rjmp	.+140    	; 0x335a <main+0xc62>
	else if (__tmp > 65535)
    32ce:	fe 01       	movw	r30, r28
    32d0:	ff 96       	adiw	r30, 0x3f	; 63
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	3f ef       	ldi	r19, 0xFF	; 255
    32de:	4f e7       	ldi	r20, 0x7F	; 127
    32e0:	57 e4       	ldi	r21, 0x47	; 71
    32e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e6:	18 16       	cp	r1, r24
    32e8:	64 f5       	brge	.+88     	; 0x3342 <main+0xc4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 5b       	subi	r30, 0xBD	; 189
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	9e af       	std	Y+62, r25	; 0x3e
    3316:	8d af       	std	Y+61, r24	; 0x3d
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <main+0xc40>
    331a:	88 ec       	ldi	r24, 0xC8	; 200
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9c af       	std	Y+60, r25	; 0x3c
    3320:	8b af       	std	Y+59, r24	; 0x3b
    3322:	8b ad       	ldd	r24, Y+59	; 0x3b
    3324:	9c ad       	ldd	r25, Y+60	; 0x3c
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <main+0xc2e>
    332a:	9c af       	std	Y+60, r25	; 0x3c
    332c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3330:	9e ad       	ldd	r25, Y+62	; 0x3e
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	9e af       	std	Y+62, r25	; 0x3e
    3336:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3338:	8d ad       	ldd	r24, Y+61	; 0x3d
    333a:	9e ad       	ldd	r25, Y+62	; 0x3e
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	69 f7       	brne	.-38     	; 0x331a <main+0xc22>
    3340:	16 c0       	rjmp	.+44     	; 0x336e <main+0xc76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3342:	fe 01       	movw	r30, r28
    3344:	ff 96       	adiw	r30, 0x3f	; 63
    3346:	60 81       	ld	r22, Z
    3348:	71 81       	ldd	r23, Z+1	; 0x01
    334a:	82 81       	ldd	r24, Z+2	; 0x02
    334c:	93 81       	ldd	r25, Z+3	; 0x03
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e af       	std	Y+62, r25	; 0x3e
    3358:	8d af       	std	Y+61, r24	; 0x3d
    335a:	8d ad       	ldd	r24, Y+61	; 0x3d
    335c:	9e ad       	ldd	r25, Y+62	; 0x3e
    335e:	9a af       	std	Y+58, r25	; 0x3a
    3360:	89 af       	std	Y+57, r24	; 0x39
    3362:	89 ad       	ldd	r24, Y+57	; 0x39
    3364:	9a ad       	ldd	r25, Y+58	; 0x3a
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <main+0xc6e>
    336a:	9a af       	std	Y+58, r25	; 0x3a
    336c:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);

			LCD_sendCommand(LCD_CLEAR_COMMAND);
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>

			//*********************************

			LCD_sendCommand(LCD_CLEAR_COMMAND);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
			LCD_displayString("Updating GPS ");
    337a:	86 ea       	ldi	r24, 0xA6	; 166
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
			LCD_moveCursor(1,1);
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	61 e0       	ldi	r22, 0x01	; 1
    3386:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_moveCursor>
			LCD_displayString("data-> ");
    338a:	84 eb       	ldi	r24, 0xB4	; 180
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_displayString>
			LCD_displayCharacter('.');
    3392:	8e e2       	ldi	r24, 0x2E	; 46
    3394:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a6 e9       	ldi	r26, 0x96	; 150
    339e:	b3 e4       	ldi	r27, 0x43	; 67
    33a0:	8d ab       	std	Y+53, r24	; 0x35
    33a2:	9e ab       	std	Y+54, r25	; 0x36
    33a4:	af ab       	std	Y+55, r26	; 0x37
    33a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	6d a9       	ldd	r22, Y+53	; 0x35
    33aa:	7e a9       	ldd	r23, Y+54	; 0x36
    33ac:	8f a9       	ldd	r24, Y+55	; 0x37
    33ae:	98 ad       	ldd	r25, Y+56	; 0x38
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4a ef       	ldi	r20, 0xFA	; 250
    33b6:	54 e4       	ldi	r21, 0x44	; 68
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	89 ab       	std	Y+49, r24	; 0x31
    33c2:	9a ab       	std	Y+50, r25	; 0x32
    33c4:	ab ab       	std	Y+51, r26	; 0x33
    33c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33c8:	69 a9       	ldd	r22, Y+49	; 0x31
    33ca:	7a a9       	ldd	r23, Y+50	; 0x32
    33cc:	8b a9       	ldd	r24, Y+51	; 0x33
    33ce:	9c a9       	ldd	r25, Y+52	; 0x34
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	2c f4       	brge	.+10     	; 0x33ea <main+0xcf2>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	98 ab       	std	Y+48, r25	; 0x30
    33e6:	8f a7       	std	Y+47, r24	; 0x2f
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <main+0xd70>
	else if (__tmp > 65535)
    33ea:	69 a9       	ldd	r22, Y+49	; 0x31
    33ec:	7a a9       	ldd	r23, Y+50	; 0x32
    33ee:	8b a9       	ldd	r24, Y+51	; 0x33
    33f0:	9c a9       	ldd	r25, Y+52	; 0x34
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	3f ef       	ldi	r19, 0xFF	; 255
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	57 e4       	ldi	r21, 0x47	; 71
    33fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33fe:	18 16       	cp	r1, r24
    3400:	4c f5       	brge	.+82     	; 0x3454 <main+0xd5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3402:	6d a9       	ldd	r22, Y+53	; 0x35
    3404:	7e a9       	ldd	r23, Y+54	; 0x36
    3406:	8f a9       	ldd	r24, Y+55	; 0x37
    3408:	98 ad       	ldd	r25, Y+56	; 0x38
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e2       	ldi	r20, 0x20	; 32
    3410:	51 e4       	ldi	r21, 0x41	; 65
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	98 ab       	std	Y+48, r25	; 0x30
    3428:	8f a7       	std	Y+47, r24	; 0x2f
    342a:	0f c0       	rjmp	.+30     	; 0x344a <main+0xd52>
    342c:	88 ec       	ldi	r24, 0xC8	; 200
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	9e a7       	std	Y+46, r25	; 0x2e
    3432:	8d a7       	std	Y+45, r24	; 0x2d
    3434:	8d a5       	ldd	r24, Y+45	; 0x2d
    3436:	9e a5       	ldd	r25, Y+46	; 0x2e
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <main+0xd40>
    343c:	9e a7       	std	Y+46, r25	; 0x2e
    343e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	8f a5       	ldd	r24, Y+47	; 0x2f
    3442:	98 a9       	ldd	r25, Y+48	; 0x30
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	98 ab       	std	Y+48, r25	; 0x30
    3448:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344a:	8f a5       	ldd	r24, Y+47	; 0x2f
    344c:	98 a9       	ldd	r25, Y+48	; 0x30
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	69 f7       	brne	.-38     	; 0x342c <main+0xd34>
    3452:	14 c0       	rjmp	.+40     	; 0x347c <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	69 a9       	ldd	r22, Y+49	; 0x31
    3456:	7a a9       	ldd	r23, Y+50	; 0x32
    3458:	8b a9       	ldd	r24, Y+51	; 0x33
    345a:	9c a9       	ldd	r25, Y+52	; 0x34
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	98 ab       	std	Y+48, r25	; 0x30
    3466:	8f a7       	std	Y+47, r24	; 0x2f
    3468:	8f a5       	ldd	r24, Y+47	; 0x2f
    346a:	98 a9       	ldd	r25, Y+48	; 0x30
    346c:	9c a7       	std	Y+44, r25	; 0x2c
    346e:	8b a7       	std	Y+43, r24	; 0x2b
    3470:	8b a5       	ldd	r24, Y+43	; 0x2b
    3472:	9c a5       	ldd	r25, Y+44	; 0x2c
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <main+0xd7c>
    3478:	9c a7       	std	Y+44, r25	; 0x2c
    347a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(300);
			LCD_displayCharacter('.');
    347c:	8e e2       	ldi	r24, 0x2E	; 46
    347e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	a6 e9       	ldi	r26, 0x96	; 150
    3488:	b3 e4       	ldi	r27, 0x43	; 67
    348a:	8f a3       	std	Y+39, r24	; 0x27
    348c:	98 a7       	std	Y+40, r25	; 0x28
    348e:	a9 a7       	std	Y+41, r26	; 0x29
    3490:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3492:	6f a1       	ldd	r22, Y+39	; 0x27
    3494:	78 a5       	ldd	r23, Y+40	; 0x28
    3496:	89 a5       	ldd	r24, Y+41	; 0x29
    3498:	9a a5       	ldd	r25, Y+42	; 0x2a
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	4a ef       	ldi	r20, 0xFA	; 250
    34a0:	54 e4       	ldi	r21, 0x44	; 68
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	8b a3       	std	Y+35, r24	; 0x23
    34ac:	9c a3       	std	Y+36, r25	; 0x24
    34ae:	ad a3       	std	Y+37, r26	; 0x25
    34b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34b2:	6b a1       	ldd	r22, Y+35	; 0x23
    34b4:	7c a1       	ldd	r23, Y+36	; 0x24
    34b6:	8d a1       	ldd	r24, Y+37	; 0x25
    34b8:	9e a1       	ldd	r25, Y+38	; 0x26
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e8       	ldi	r20, 0x80	; 128
    34c0:	5f e3       	ldi	r21, 0x3F	; 63
    34c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c6:	88 23       	and	r24, r24
    34c8:	2c f4       	brge	.+10     	; 0x34d4 <main+0xddc>
		__ticks = 1;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	9a a3       	std	Y+34, r25	; 0x22
    34d0:	89 a3       	std	Y+33, r24	; 0x21
    34d2:	3f c0       	rjmp	.+126    	; 0x3552 <main+0xe5a>
	else if (__tmp > 65535)
    34d4:	6b a1       	ldd	r22, Y+35	; 0x23
    34d6:	7c a1       	ldd	r23, Y+36	; 0x24
    34d8:	8d a1       	ldd	r24, Y+37	; 0x25
    34da:	9e a1       	ldd	r25, Y+38	; 0x26
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	3f ef       	ldi	r19, 0xFF	; 255
    34e0:	4f e7       	ldi	r20, 0x7F	; 127
    34e2:	57 e4       	ldi	r21, 0x47	; 71
    34e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e8:	18 16       	cp	r1, r24
    34ea:	4c f5       	brge	.+82     	; 0x353e <main+0xe46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ec:	6f a1       	ldd	r22, Y+39	; 0x27
    34ee:	78 a5       	ldd	r23, Y+40	; 0x28
    34f0:	89 a5       	ldd	r24, Y+41	; 0x29
    34f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e2       	ldi	r20, 0x20	; 32
    34fa:	51 e4       	ldi	r21, 0x41	; 65
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	9a a3       	std	Y+34, r25	; 0x22
    3512:	89 a3       	std	Y+33, r24	; 0x21
    3514:	0f c0       	rjmp	.+30     	; 0x3534 <main+0xe3c>
    3516:	88 ec       	ldi	r24, 0xC8	; 200
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	98 a3       	std	Y+32, r25	; 0x20
    351c:	8f 8f       	std	Y+31, r24	; 0x1f
    351e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3520:	98 a1       	ldd	r25, Y+32	; 0x20
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <main+0xe2a>
    3526:	98 a3       	std	Y+32, r25	; 0x20
    3528:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352a:	89 a1       	ldd	r24, Y+33	; 0x21
    352c:	9a a1       	ldd	r25, Y+34	; 0x22
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	9a a3       	std	Y+34, r25	; 0x22
    3532:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3534:	89 a1       	ldd	r24, Y+33	; 0x21
    3536:	9a a1       	ldd	r25, Y+34	; 0x22
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	69 f7       	brne	.-38     	; 0x3516 <main+0xe1e>
    353c:	14 c0       	rjmp	.+40     	; 0x3566 <main+0xe6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353e:	6b a1       	ldd	r22, Y+35	; 0x23
    3540:	7c a1       	ldd	r23, Y+36	; 0x24
    3542:	8d a1       	ldd	r24, Y+37	; 0x25
    3544:	9e a1       	ldd	r25, Y+38	; 0x26
    3546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	9a a3       	std	Y+34, r25	; 0x22
    3550:	89 a3       	std	Y+33, r24	; 0x21
    3552:	89 a1       	ldd	r24, Y+33	; 0x21
    3554:	9a a1       	ldd	r25, Y+34	; 0x22
    3556:	9e 8f       	std	Y+30, r25	; 0x1e
    3558:	8d 8f       	std	Y+29, r24	; 0x1d
    355a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    355c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <main+0xe66>
    3562:	9e 8f       	std	Y+30, r25	; 0x1e
    3564:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			LCD_displayCharacter('.');
    3566:	8e e2       	ldi	r24, 0x2E	; 46
    3568:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a6 e9       	ldi	r26, 0x96	; 150
    3572:	b3 e4       	ldi	r27, 0x43	; 67
    3574:	89 8f       	std	Y+25, r24	; 0x19
    3576:	9a 8f       	std	Y+26, r25	; 0x1a
    3578:	ab 8f       	std	Y+27, r26	; 0x1b
    357a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357c:	69 8d       	ldd	r22, Y+25	; 0x19
    357e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3580:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3582:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a ef       	ldi	r20, 0xFA	; 250
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8d 8b       	std	Y+21, r24	; 0x15
    3596:	9e 8b       	std	Y+22, r25	; 0x16
    3598:	af 8b       	std	Y+23, r26	; 0x17
    359a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    359c:	6d 89       	ldd	r22, Y+21	; 0x15
    359e:	7e 89       	ldd	r23, Y+22	; 0x16
    35a0:	8f 89       	ldd	r24, Y+23	; 0x17
    35a2:	98 8d       	ldd	r25, Y+24	; 0x18
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e8       	ldi	r20, 0x80	; 128
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b0:	88 23       	and	r24, r24
    35b2:	2c f4       	brge	.+10     	; 0x35be <main+0xec6>
		__ticks = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9c 8b       	std	Y+20, r25	; 0x14
    35ba:	8b 8b       	std	Y+19, r24	; 0x13
    35bc:	3f c0       	rjmp	.+126    	; 0x363c <main+0xf44>
	else if (__tmp > 65535)
    35be:	6d 89       	ldd	r22, Y+21	; 0x15
    35c0:	7e 89       	ldd	r23, Y+22	; 0x16
    35c2:	8f 89       	ldd	r24, Y+23	; 0x17
    35c4:	98 8d       	ldd	r25, Y+24	; 0x18
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3f ef       	ldi	r19, 0xFF	; 255
    35ca:	4f e7       	ldi	r20, 0x7F	; 127
    35cc:	57 e4       	ldi	r21, 0x47	; 71
    35ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d2:	18 16       	cp	r1, r24
    35d4:	4c f5       	brge	.+82     	; 0x3628 <main+0xf30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d6:	69 8d       	ldd	r22, Y+25	; 0x19
    35d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	51 e4       	ldi	r21, 0x41	; 65
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9c 8b       	std	Y+20, r25	; 0x14
    35fc:	8b 8b       	std	Y+19, r24	; 0x13
    35fe:	0f c0       	rjmp	.+30     	; 0x361e <main+0xf26>
    3600:	88 ec       	ldi	r24, 0xC8	; 200
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	9a 8b       	std	Y+18, r25	; 0x12
    3606:	89 8b       	std	Y+17, r24	; 0x11
    3608:	89 89       	ldd	r24, Y+17	; 0x11
    360a:	9a 89       	ldd	r25, Y+18	; 0x12
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <main+0xf14>
    3610:	9a 8b       	std	Y+18, r25	; 0x12
    3612:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3614:	8b 89       	ldd	r24, Y+19	; 0x13
    3616:	9c 89       	ldd	r25, Y+20	; 0x14
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	9c 8b       	std	Y+20, r25	; 0x14
    361c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361e:	8b 89       	ldd	r24, Y+19	; 0x13
    3620:	9c 89       	ldd	r25, Y+20	; 0x14
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	69 f7       	brne	.-38     	; 0x3600 <main+0xf08>
    3626:	14 c0       	rjmp	.+40     	; 0x3650 <main+0xf58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3628:	6d 89       	ldd	r22, Y+21	; 0x15
    362a:	7e 89       	ldd	r23, Y+22	; 0x16
    362c:	8f 89       	ldd	r24, Y+23	; 0x17
    362e:	98 8d       	ldd	r25, Y+24	; 0x18
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9c 8b       	std	Y+20, r25	; 0x14
    363a:	8b 8b       	std	Y+19, r24	; 0x13
    363c:	8b 89       	ldd	r24, Y+19	; 0x13
    363e:	9c 89       	ldd	r25, Y+20	; 0x14
    3640:	98 8b       	std	Y+16, r25	; 0x10
    3642:	8f 87       	std	Y+15, r24	; 0x0f
    3644:	8f 85       	ldd	r24, Y+15	; 0x0f
    3646:	98 89       	ldd	r25, Y+16	; 0x10
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <main+0xf50>
    364c:	98 8b       	std	Y+16, r25	; 0x10
    364e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			LCD_displayCharacter('.');
    3650:	8e e2       	ldi	r24, 0x2E	; 46
    3652:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	a6 e9       	ldi	r26, 0x96	; 150
    365c:	b3 e4       	ldi	r27, 0x43	; 67
    365e:	8b 87       	std	Y+11, r24	; 0x0b
    3660:	9c 87       	std	Y+12, r25	; 0x0c
    3662:	ad 87       	std	Y+13, r26	; 0x0d
    3664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3666:	6b 85       	ldd	r22, Y+11	; 0x0b
    3668:	7c 85       	ldd	r23, Y+12	; 0x0c
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	4a ef       	ldi	r20, 0xFA	; 250
    3674:	54 e4       	ldi	r21, 0x44	; 68
    3676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8f 83       	std	Y+7, r24	; 0x07
    3680:	98 87       	std	Y+8, r25	; 0x08
    3682:	a9 87       	std	Y+9, r26	; 0x09
    3684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3686:	6f 81       	ldd	r22, Y+7	; 0x07
    3688:	78 85       	ldd	r23, Y+8	; 0x08
    368a:	89 85       	ldd	r24, Y+9	; 0x09
    368c:	9a 85       	ldd	r25, Y+10	; 0x0a
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e8       	ldi	r20, 0x80	; 128
    3694:	5f e3       	ldi	r21, 0x3F	; 63
    3696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    369a:	88 23       	and	r24, r24
    369c:	2c f4       	brge	.+10     	; 0x36a8 <main+0xfb0>
		__ticks = 1;
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	3f c0       	rjmp	.+126    	; 0x3726 <main+0x102e>
	else if (__tmp > 65535)
    36a8:	6f 81       	ldd	r22, Y+7	; 0x07
    36aa:	78 85       	ldd	r23, Y+8	; 0x08
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	3f ef       	ldi	r19, 0xFF	; 255
    36b4:	4f e7       	ldi	r20, 0x7F	; 127
    36b6:	57 e4       	ldi	r21, 0x47	; 71
    36b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36bc:	18 16       	cp	r1, r24
    36be:	4c f5       	brge	.+82     	; 0x3712 <main+0x101a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <main+0x1010>
    36ea:	88 ec       	ldi	r24, 0xC8	; 200
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	9c 83       	std	Y+4, r25	; 0x04
    36f0:	8b 83       	std	Y+3, r24	; 0x03
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	9c 81       	ldd	r25, Y+4	; 0x04
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <main+0xffe>
    36fa:	9c 83       	std	Y+4, r25	; 0x04
    36fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	9e 81       	ldd	r25, Y+6	; 0x06
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	9e 83       	std	Y+6, r25	; 0x06
    3706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	8d 81       	ldd	r24, Y+5	; 0x05
    370a:	9e 81       	ldd	r25, Y+6	; 0x06
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	69 f7       	brne	.-38     	; 0x36ea <main+0xff2>
    3710:	14 c0       	rjmp	.+40     	; 0x373a <main+0x1042>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	6f 81       	ldd	r22, Y+7	; 0x07
    3714:	78 85       	ldd	r23, Y+8	; 0x08
    3716:	89 85       	ldd	r24, Y+9	; 0x09
    3718:	9a 85       	ldd	r25, Y+10	; 0x0a
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9e 83       	std	Y+6, r25	; 0x06
    3724:	8d 83       	std	Y+5, r24	; 0x05
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <main+0x103a>
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			LCD_displayCharacter('.');
    373a:	8e e2       	ldi	r24, 0x2E	; 46
    373c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	0e 94 a5 09 	call	0x134a	; 0x134a <LCD_sendCommand>
    3746:	88 c9       	rjmp	.-3312   	; 0x2a58 <main+0x360>

00003748 <UART_initialize>:
 */



void UART_initialize (USART_config_t *USART_config)
{
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	00 d0       	rcall	.+0      	; 0x374e <UART_initialize+0x6>
    374e:	00 d0       	rcall	.+0      	; 0x3750 <UART_initialize+0x8>
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	9c 83       	std	Y+4, r25	; 0x04
    3756:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3758:	1a 82       	std	Y+2, r1	; 0x02
    375a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= USART_config->asynchronous_speed_mode_select;
    375c:	ab e2       	ldi	r26, 0x2B	; 43
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	eb e2       	ldi	r30, 0x2B	; 43
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	90 81       	ld	r25, Z
    3766:	eb 81       	ldd	r30, Y+3	; 0x03
    3768:	fc 81       	ldd	r31, Y+4	; 0x04
    376a:	80 81       	ld	r24, Z
    376c:	89 2b       	or	r24, r25
    376e:	8c 93       	st	X, r24

	UCSRB |= USART_config->recive_data_statuse;
    3770:	aa e2       	ldi	r26, 0x2A	; 42
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	ea e2       	ldi	r30, 0x2A	; 42
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	90 81       	ld	r25, Z
    377a:	eb 81       	ldd	r30, Y+3	; 0x03
    377c:	fc 81       	ldd	r31, Y+4	; 0x04
    377e:	80 85       	ldd	r24, Z+8	; 0x08
    3780:	89 2b       	or	r24, r25
    3782:	8c 93       	st	X, r24
	UCSRB |= USART_config->transmitter_data_statuse;
    3784:	aa e2       	ldi	r26, 0x2A	; 42
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ea e2       	ldi	r30, 0x2A	; 42
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	90 81       	ld	r25, Z
    378e:	eb 81       	ldd	r30, Y+3	; 0x03
    3790:	fc 81       	ldd	r31, Y+4	; 0x04
    3792:	81 85       	ldd	r24, Z+9	; 0x09
    3794:	89 2b       	or	r24, r25
    3796:	8c 93       	st	X, r24
	UCSRB |= USART_config->RX_complete_interrupt_enable;
    3798:	aa e2       	ldi	r26, 0x2A	; 42
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	ea e2       	ldi	r30, 0x2A	; 42
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	90 81       	ld	r25, Z
    37a2:	eb 81       	ldd	r30, Y+3	; 0x03
    37a4:	fc 81       	ldd	r31, Y+4	; 0x04
    37a6:	85 81       	ldd	r24, Z+5	; 0x05
    37a8:	89 2b       	or	r24, r25
    37aa:	8c 93       	st	X, r24
	UCSRB |= USART_config->TX_complete_interrupt_enable;
    37ac:	aa e2       	ldi	r26, 0x2A	; 42
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ea e2       	ldi	r30, 0x2A	; 42
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	90 81       	ld	r25, Z
    37b6:	eb 81       	ldd	r30, Y+3	; 0x03
    37b8:	fc 81       	ldd	r31, Y+4	; 0x04
    37ba:	86 81       	ldd	r24, Z+6	; 0x06
    37bc:	89 2b       	or	r24, r25
    37be:	8c 93       	st	X, r24


	UCSRC |= (1<<URSEL ); // URSEL   = 1 The URSEL must be one when writing the UCSRC
    37c0:	a0 e4       	ldi	r26, 0x40	; 64
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e0 e4       	ldi	r30, 0x40	; 64
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	80 68       	ori	r24, 0x80	; 128
    37cc:	8c 93       	st	X, r24
	UCSRC |= USART_config->character_size;
    37ce:	a0 e4       	ldi	r26, 0x40	; 64
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e0 e4       	ldi	r30, 0x40	; 64
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	90 81       	ld	r25, Z
    37d8:	eb 81       	ldd	r30, Y+3	; 0x03
    37da:	fc 81       	ldd	r31, Y+4	; 0x04
    37dc:	84 81       	ldd	r24, Z+4	; 0x04
    37de:	89 2b       	or	r24, r25
    37e0:	8c 93       	st	X, r24

	ubrr_value = (uint16)(((F_CPU / (USART_config->baud_rate * 8UL))) - 1);
    37e2:	eb 81       	ldd	r30, Y+3	; 0x03
    37e4:	fc 81       	ldd	r31, Y+4	; 0x04
    37e6:	82 85       	ldd	r24, Z+10	; 0x0a
    37e8:	93 85       	ldd	r25, Z+11	; 0x0b
    37ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    37ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	aa 1f       	adc	r26, r26
    37f4:	bb 1f       	adc	r27, r27
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	aa 1f       	adc	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	9c 01       	movw	r18, r24
    3808:	ad 01       	movw	r20, r26
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	92 e1       	ldi	r25, 0x12	; 18
    380e:	aa e7       	ldi	r26, 0x7A	; 122
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodsi4>
    381a:	da 01       	movw	r26, r20
    381c:	c9 01       	movw	r24, r18
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = ubrr_value>>8;
    3824:	e0 e4       	ldi	r30, 0x40	; 64
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	9a 81       	ldd	r25, Y+2	; 0x02
    382c:	89 2f       	mov	r24, r25
    382e:	99 27       	eor	r25, r25
    3830:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3832:	e9 e2       	ldi	r30, 0x29	; 41
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	80 83       	st	Z, r24


}
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <UART_init>:


void UART_init(uint32 baud_rate)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	00 d0       	rcall	.+0      	; 0x384e <UART_init+0x6>
    384e:	00 d0       	rcall	.+0      	; 0x3850 <UART_init+0x8>
    3850:	00 d0       	rcall	.+0      	; 0x3852 <UART_init+0xa>
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	6b 83       	std	Y+3, r22	; 0x03
    3858:	7c 83       	std	Y+4, r23	; 0x04
    385a:	8d 83       	std	Y+5, r24	; 0x05
    385c:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    385e:	1a 82       	std	Y+2, r1	; 0x02
    3860:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3862:	eb e2       	ldi	r30, 0x2B	; 43
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	82 e0       	ldi	r24, 0x02	; 2
    3868:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    386a:	ea e2       	ldi	r30, 0x2A	; 42
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	88 e1       	ldi	r24, 0x18	; 24
    3870:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    3872:	e0 e4       	ldi	r30, 0x40	; 64
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	86 e8       	ldi	r24, 0x86	; 134
    3878:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	ad 81       	ldd	r26, Y+5	; 0x05
    3880:	be 81       	ldd	r27, Y+6	; 0x06
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	aa 1f       	adc	r26, r26
    3888:	bb 1f       	adc	r27, r27
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	aa 1f       	adc	r26, r26
    3890:	bb 1f       	adc	r27, r27
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	aa 1f       	adc	r26, r26
    3898:	bb 1f       	adc	r27, r27
    389a:	9c 01       	movw	r18, r24
    389c:	ad 01       	movw	r20, r26
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	92 e1       	ldi	r25, 0x12	; 18
    38a2:	aa e7       	ldi	r26, 0x7A	; 122
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodsi4>
    38ae:	da 01       	movw	r26, r20
    38b0:	c9 01       	movw	r24, r18
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    38b6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    38b8:	e0 e4       	ldi	r30, 0x40	; 64
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	89 2f       	mov	r24, r25
    38c2:	99 27       	eor	r25, r25
    38c4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    38c6:	e9 e2       	ldi	r30, 0x29	; 41
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	80 83       	st	Z, r24
}
    38ce:	26 96       	adiw	r28, 0x06	; 6
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	08 95       	ret

000038e0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    38e0:	df 93       	push	r29
    38e2:	cf 93       	push	r28
    38e4:	0f 92       	push	r0
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    38ec:	eb e2       	ldi	r30, 0x2B	; 43
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	88 2f       	mov	r24, r24
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	80 72       	andi	r24, 0x20	; 32
    38f8:	90 70       	andi	r25, 0x00	; 0
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	b9 f3       	breq	.-18     	; 0x38ec <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    38fe:	ec e2       	ldi	r30, 0x2C	; 44
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3916:	eb e2       	ldi	r30, 0x2B	; 43
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	88 23       	and	r24, r24
    391e:	dc f7       	brge	.-10     	; 0x3916 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3920:	ec e2       	ldi	r30, 0x2C	; 44
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
}
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	08 95       	ret

0000392c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	00 d0       	rcall	.+0      	; 0x3932 <UART_sendString+0x6>
    3932:	0f 92       	push	r0
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	9b 83       	std	Y+3, r25	; 0x03
    393a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    393c:	19 82       	std	Y+1, r1	; 0x01
    393e:	0e c0       	rjmp	.+28     	; 0x395c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	9b 81       	ldd	r25, Y+3	; 0x03
    394a:	fc 01       	movw	r30, r24
    394c:	e2 0f       	add	r30, r18
    394e:	f3 1f       	adc	r31, r19
    3950:	80 81       	ld	r24, Z
    3952:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <UART_sendByte>
		i++;
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	8f 5f       	subi	r24, 0xFF	; 255
    395a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	28 2f       	mov	r18, r24
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	9b 81       	ldd	r25, Y+3	; 0x03
    3966:	fc 01       	movw	r30, r24
    3968:	e2 0f       	add	r30, r18
    396a:	f3 1f       	adc	r31, r19
    396c:	80 81       	ld	r24, Z
    396e:	88 23       	and	r24, r24
    3970:	39 f7       	brne	.-50     	; 0x3940 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	00 d0       	rcall	.+0      	; 0x3988 <UART_receiveString+0xa>
    3988:	0f 92       	push	r0
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	9b 83       	std	Y+3, r25	; 0x03
    3990:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3992:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	28 2f       	mov	r18, r24
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	8a 81       	ldd	r24, Y+2	; 0x02
    399c:	9b 81       	ldd	r25, Y+3	; 0x03
    399e:	8c 01       	movw	r16, r24
    39a0:	02 0f       	add	r16, r18
    39a2:	13 1f       	adc	r17, r19
    39a4:	0e 94 87 1c 	call	0x390e	; 0x390e <UART_recieveByte>
    39a8:	f8 01       	movw	r30, r16
    39aa:	80 83       	st	Z, r24
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '*')
	{
		i++;
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	8f 5f       	subi	r24, 0xFF	; 255
    39b2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	28 2f       	mov	r18, r24
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	8a 81       	ldd	r24, Y+2	; 0x02
    39bc:	9b 81       	ldd	r25, Y+3	; 0x03
    39be:	8c 01       	movw	r16, r24
    39c0:	02 0f       	add	r16, r18
    39c2:	13 1f       	adc	r17, r19
    39c4:	0e 94 87 1c 	call	0x390e	; 0x390e <UART_recieveByte>
    39c8:	f8 01       	movw	r30, r16
    39ca:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '*')
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	28 2f       	mov	r18, r24
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	9b 81       	ldd	r25, Y+3	; 0x03
    39d6:	fc 01       	movw	r30, r24
    39d8:	e2 0f       	add	r30, r18
    39da:	f3 1f       	adc	r31, r19
    39dc:	80 81       	ld	r24, Z
    39de:	8a 32       	cpi	r24, 0x2A	; 42
    39e0:	31 f7       	brne	.-52     	; 0x39ae <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	fc 01       	movw	r30, r24
    39ee:	e2 0f       	add	r30, r18
    39f0:	f3 1f       	adc	r31, r19
    39f2:	10 82       	st	Z, r1
}
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	08 95       	ret

00003a04 <__udivmodsi4>:
    3a04:	a1 e2       	ldi	r26, 0x21	; 33
    3a06:	1a 2e       	mov	r1, r26
    3a08:	aa 1b       	sub	r26, r26
    3a0a:	bb 1b       	sub	r27, r27
    3a0c:	fd 01       	movw	r30, r26
    3a0e:	0d c0       	rjmp	.+26     	; 0x3a2a <__udivmodsi4_ep>

00003a10 <__udivmodsi4_loop>:
    3a10:	aa 1f       	adc	r26, r26
    3a12:	bb 1f       	adc	r27, r27
    3a14:	ee 1f       	adc	r30, r30
    3a16:	ff 1f       	adc	r31, r31
    3a18:	a2 17       	cp	r26, r18
    3a1a:	b3 07       	cpc	r27, r19
    3a1c:	e4 07       	cpc	r30, r20
    3a1e:	f5 07       	cpc	r31, r21
    3a20:	20 f0       	brcs	.+8      	; 0x3a2a <__udivmodsi4_ep>
    3a22:	a2 1b       	sub	r26, r18
    3a24:	b3 0b       	sbc	r27, r19
    3a26:	e4 0b       	sbc	r30, r20
    3a28:	f5 0b       	sbc	r31, r21

00003a2a <__udivmodsi4_ep>:
    3a2a:	66 1f       	adc	r22, r22
    3a2c:	77 1f       	adc	r23, r23
    3a2e:	88 1f       	adc	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	1a 94       	dec	r1
    3a34:	69 f7       	brne	.-38     	; 0x3a10 <__udivmodsi4_loop>
    3a36:	60 95       	com	r22
    3a38:	70 95       	com	r23
    3a3a:	80 95       	com	r24
    3a3c:	90 95       	com	r25
    3a3e:	9b 01       	movw	r18, r22
    3a40:	ac 01       	movw	r20, r24
    3a42:	bd 01       	movw	r22, r26
    3a44:	cf 01       	movw	r24, r30
    3a46:	08 95       	ret

00003a48 <__prologue_saves__>:
    3a48:	2f 92       	push	r2
    3a4a:	3f 92       	push	r3
    3a4c:	4f 92       	push	r4
    3a4e:	5f 92       	push	r5
    3a50:	6f 92       	push	r6
    3a52:	7f 92       	push	r7
    3a54:	8f 92       	push	r8
    3a56:	9f 92       	push	r9
    3a58:	af 92       	push	r10
    3a5a:	bf 92       	push	r11
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	ca 1b       	sub	r28, r26
    3a72:	db 0b       	sbc	r29, r27
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	09 94       	ijmp

00003a80 <__epilogue_restores__>:
    3a80:	2a 88       	ldd	r2, Y+18	; 0x12
    3a82:	39 88       	ldd	r3, Y+17	; 0x11
    3a84:	48 88       	ldd	r4, Y+16	; 0x10
    3a86:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a88:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a90:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a92:	b9 84       	ldd	r11, Y+9	; 0x09
    3a94:	c8 84       	ldd	r12, Y+8	; 0x08
    3a96:	df 80       	ldd	r13, Y+7	; 0x07
    3a98:	ee 80       	ldd	r14, Y+6	; 0x06
    3a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a9c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a9e:	1b 81       	ldd	r17, Y+3	; 0x03
    3aa0:	aa 81       	ldd	r26, Y+2	; 0x02
    3aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    3aa4:	ce 0f       	add	r28, r30
    3aa6:	d1 1d       	adc	r29, r1
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	ed 01       	movw	r28, r26
    3ab4:	08 95       	ret

00003ab6 <itoa>:
    3ab6:	fb 01       	movw	r30, r22
    3ab8:	9f 01       	movw	r18, r30
    3aba:	e8 94       	clt
    3abc:	42 30       	cpi	r20, 0x02	; 2
    3abe:	c4 f0       	brlt	.+48     	; 0x3af0 <itoa+0x3a>
    3ac0:	45 32       	cpi	r20, 0x25	; 37
    3ac2:	b4 f4       	brge	.+44     	; 0x3af0 <itoa+0x3a>
    3ac4:	4a 30       	cpi	r20, 0x0A	; 10
    3ac6:	29 f4       	brne	.+10     	; 0x3ad2 <itoa+0x1c>
    3ac8:	97 fb       	bst	r25, 7
    3aca:	1e f4       	brtc	.+6      	; 0x3ad2 <itoa+0x1c>
    3acc:	90 95       	com	r25
    3ace:	81 95       	neg	r24
    3ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad2:	64 2f       	mov	r22, r20
    3ad4:	77 27       	eor	r23, r23
    3ad6:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodhi4>
    3ada:	80 5d       	subi	r24, 0xD0	; 208
    3adc:	8a 33       	cpi	r24, 0x3A	; 58
    3ade:	0c f0       	brlt	.+2      	; 0x3ae2 <itoa+0x2c>
    3ae0:	89 5d       	subi	r24, 0xD9	; 217
    3ae2:	81 93       	st	Z+, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	00 97       	sbiw	r24, 0x00	; 0
    3ae8:	a1 f7       	brne	.-24     	; 0x3ad2 <itoa+0x1c>
    3aea:	16 f4       	brtc	.+4      	; 0x3af0 <itoa+0x3a>
    3aec:	5d e2       	ldi	r21, 0x2D	; 45
    3aee:	51 93       	st	Z+, r21
    3af0:	10 82       	st	Z, r1
    3af2:	c9 01       	movw	r24, r18
    3af4:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <strrev>

00003af8 <strrev>:
    3af8:	dc 01       	movw	r26, r24
    3afa:	fc 01       	movw	r30, r24
    3afc:	67 2f       	mov	r22, r23
    3afe:	71 91       	ld	r23, Z+
    3b00:	77 23       	and	r23, r23
    3b02:	e1 f7       	brne	.-8      	; 0x3afc <strrev+0x4>
    3b04:	32 97       	sbiw	r30, 0x02	; 2
    3b06:	04 c0       	rjmp	.+8      	; 0x3b10 <strrev+0x18>
    3b08:	7c 91       	ld	r23, X
    3b0a:	6d 93       	st	X+, r22
    3b0c:	70 83       	st	Z, r23
    3b0e:	62 91       	ld	r22, -Z
    3b10:	ae 17       	cp	r26, r30
    3b12:	bf 07       	cpc	r27, r31
    3b14:	c8 f3       	brcs	.-14     	; 0x3b08 <strrev+0x10>
    3b16:	08 95       	ret

00003b18 <__udivmodhi4>:
    3b18:	aa 1b       	sub	r26, r26
    3b1a:	bb 1b       	sub	r27, r27
    3b1c:	51 e1       	ldi	r21, 0x11	; 17
    3b1e:	07 c0       	rjmp	.+14     	; 0x3b2e <__udivmodhi4_ep>

00003b20 <__udivmodhi4_loop>:
    3b20:	aa 1f       	adc	r26, r26
    3b22:	bb 1f       	adc	r27, r27
    3b24:	a6 17       	cp	r26, r22
    3b26:	b7 07       	cpc	r27, r23
    3b28:	10 f0       	brcs	.+4      	; 0x3b2e <__udivmodhi4_ep>
    3b2a:	a6 1b       	sub	r26, r22
    3b2c:	b7 0b       	sbc	r27, r23

00003b2e <__udivmodhi4_ep>:
    3b2e:	88 1f       	adc	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	5a 95       	dec	r21
    3b34:	a9 f7       	brne	.-22     	; 0x3b20 <__udivmodhi4_loop>
    3b36:	80 95       	com	r24
    3b38:	90 95       	com	r25
    3b3a:	bc 01       	movw	r22, r24
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	08 95       	ret

00003b40 <_exit>:
    3b40:	f8 94       	cli

00003b42 <__stop_program>:
    3b42:	ff cf       	rjmp	.-2      	; 0x3b42 <__stop_program>
